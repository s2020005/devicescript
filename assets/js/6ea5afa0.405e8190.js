"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3482],{35318:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var i=n(27378);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=i.createContext({}),p=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return i.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},k=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(n),k=a,m=d["".concat(s,".").concat(k)]||d[k]||u[k]||r;return n?i.createElement(m,o(o({ref:t},c),{},{components:n})):i.createElement(m,o({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=k;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:a,o[1]=l;for(var p=2;p<r;p++)o[p]=n[p];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}k.displayName="MDXCreateElement"},99499:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var i=n(25773),a=(n(27378),n(35318));const r={pagination_prev:null,pagination_next:null,description:"DeviceScript client for Jacdac WIFI service"},o="Wifi",l={unversionedId:"api/clients/wifi",id:"api/clients/wifi",title:"Wifi",description:"DeviceScript client for Jacdac WIFI service",source:"@site/docs/api/clients/wifi.md",sourceDirName:"api/clients",slug:"/api/clients/wifi",permalink:"/devicescript/api/clients/wifi",draft:!1,tags:[],version:"current",frontMatter:{pagination_prev:null,pagination_next:null,description:"DeviceScript client for Jacdac WIFI service"},sidebar:"tutorialSidebar"},s={},p=[{value:"About",id:"about",level:2},{value:"Connection",id:"connection",level:2},{value:"Captive portals",id:"captive-portals",level:2},{value:"Commands",id:"commands",level:2},{value:"lastScanResults",id:"lastscanresults",level:3},{value:"addNetwork",id:"addnetwork",level:3},{value:"reconnect",id:"reconnect",level:3},{value:"forgetNetwork",id:"forgetnetwork",level:3},{value:"forgetAllNetworks",id:"forgetallnetworks",level:3},{value:"setNetworkPriority",id:"setnetworkpriority",level:3},{value:"scan",id:"scan",level:3},{value:"listKnownNetworks",id:"listknownnetworks",level:3},{value:"Registers",id:"registers",level:2},{value:"reading",id:"ro:reading",level:3},{value:"enabled",id:"rw:enabled",level:3},{value:"ipAddress",id:"ro:ipAddress",level:3},{value:"eui48",id:"const:eui48",level:3},{value:"ssid",id:"ro:ssid",level:3},{value:"Events",id:"events",level:2},{value:"gotIp",id:"gotip",level:3},{value:"lostIp",id:"lostip",level:3},{value:"scanComplete",id:"scancomplete",level:3},{value:"networksChanged",id:"networkschanged",level:3},{value:"connectionFailed",id:"connectionfailed",level:3}],c={toc:p},d="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"wifi"},"Wifi"),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"This service is rc and may change in the future.")),(0,a.kt)("p",null,"Discovery and connection to WiFi networks. Separate TCP service can be used for data transfer."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"client for ",(0,a.kt)("a",{parentName:"li",href:"https://microsoft.github.io/jacdac-docs/services/wifi/"},"WIFI service")),(0,a.kt)("li",{parentName:"ul"},"inherits Role")),(0,a.kt)("h2",{id:"about"},"About"),(0,a.kt)("h2",{id:"connection"},"Connection"),(0,a.kt)("p",null,"The device controlled by this service is meant to connect automatically, once configured.\nTo that end, it keeps a list of known WiFi networks, with priorities and passwords.\nIt will connect to the available network with numerically highest priority,\nbreaking ties in priority by signal strength (typically all known networks have priority of ",(0,a.kt)("inlineCode",{parentName:"p"},"0"),").\nIf the connection fails (due to wrong password, radio failure, or other problem)\nan ",(0,a.kt)("inlineCode",{parentName:"p"},"connection_failed")," event is emitted, and the device will try to connect to the next eligible network.\nWhen networks are exhausted, the scan is performed again and the connection process restarts."),(0,a.kt)("p",null,"Updating networks (setting password, priorties, forgetting) does not trigger an automatic reconnect."),(0,a.kt)("h2",{id:"captive-portals"},"Captive portals"),(0,a.kt)("p",null,"If the Wifi is not able to join an AP because it needs to receive a password, it may decide to enter a mode\nwhere it waits for user input. Typical example of this mode would be a captive portal or waiting for a BLE interaction.\nIn that situation, the ",(0,a.kt)("inlineCode",{parentName:"p"},"status_code")," should set to ",(0,a.kt)("inlineCode",{parentName:"p"},"WaitingForInput"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { Wifi } from "@devicescript/core"\n\nconst wifi = new Wifi()\n')),(0,a.kt)("h2",{id:"commands"},"Commands"),(0,a.kt)("h3",{id:"lastscanresults"},"lastScanResults"),(0,a.kt)("p",null,"Return list of WiFi network from the last scan.\nScans are performed periodically while not connected (in particular, on startup and after current connection drops),\nas well as upon ",(0,a.kt)("inlineCode",{parentName:"p"},"reconnect")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"scan")," commands."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip no-run",skip:!0,"no-run":!0},"wifi.lastScanResults(results: unknown): Promise<void>\n")),(0,a.kt)("h3",{id:"addnetwork"},"addNetwork"),(0,a.kt)("p",null,"Automatically connect to named network if available. Also set password if network is not open."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip no-run",skip:!0,"no-run":!0},"wifi.addNetwork(ssid: string, password: string): Promise<void>\n")),(0,a.kt)("h3",{id:"reconnect"},"reconnect"),(0,a.kt)("p",null,"Enable the WiFi (if disabled), initiate a scan, wait for results, disconnect from current WiFi network if any,\nand then reconnect (using regular algorithm, see ",(0,a.kt)("inlineCode",{parentName:"p"},"set_network_priority"),")."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip no-run",skip:!0,"no-run":!0},"wifi.reconnect(): Promise<void>\n")),(0,a.kt)("h3",{id:"forgetnetwork"},"forgetNetwork"),(0,a.kt)("p",null,"Prevent from automatically connecting to named network in future.\nForgetting a network resets its priority to ",(0,a.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip no-run",skip:!0,"no-run":!0},"wifi.forgetNetwork(ssid: string): Promise<void>\n")),(0,a.kt)("h3",{id:"forgetallnetworks"},"forgetAllNetworks"),(0,a.kt)("p",null,"Clear the list of known networks."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip no-run",skip:!0,"no-run":!0},"wifi.forgetAllNetworks(): Promise<void>\n")),(0,a.kt)("h3",{id:"setnetworkpriority"},"setNetworkPriority"),(0,a.kt)("p",null,"Set connection priority for a network.\nBy default, all known networks have priority of ",(0,a.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip no-run",skip:!0,"no-run":!0},"wifi.setNetworkPriority(priority: number, ssid: string): Promise<void>\n")),(0,a.kt)("h3",{id:"scan"},"scan"),(0,a.kt)("p",null,"Initiate search for WiFi networks. Generates ",(0,a.kt)("inlineCode",{parentName:"p"},"scan_complete")," event."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip no-run",skip:!0,"no-run":!0},"wifi.scan(): Promise<void>\n")),(0,a.kt)("h3",{id:"listknownnetworks"},"listKnownNetworks"),(0,a.kt)("p",null,"Return list of known WiFi networks.\n",(0,a.kt)("inlineCode",{parentName:"p"},"flags")," is currently always 0."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip no-run",skip:!0,"no-run":!0},"wifi.listKnownNetworks(results: unknown): Promise<void>\n")),(0,a.kt)("h2",{id:"registers"},"Registers"),(0,a.kt)("h3",{id:"ro:reading"},"reading"),(0,a.kt)("p",null,"Current signal strength. Returns -128 when not connected."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"type: ",(0,a.kt)("inlineCode",{parentName:"p"},"Register<number>")," (packing format ",(0,a.kt)("inlineCode",{parentName:"p"},"i8"),")")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"read only"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip",skip:!0},'import { Wifi } from "@devicescript/core"\n\nconst wifi = new Wifi()\n// ...\nconst value = await wifi.reading.read()\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"track incoming values")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip",skip:!0},'import { Wifi } from "@devicescript/core"\n\nconst wifi = new Wifi()\n// ...\nwifi.reading.subscribe(async (value) => {\n    ...\n})\n')),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"write")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"read")," will block until a server is bound to the client.")),(0,a.kt)("h3",{id:"rw:enabled"},"enabled"),(0,a.kt)("p",null,"Determines whether the WiFi radio is enabled. It starts enabled upon reset."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"type: ",(0,a.kt)("inlineCode",{parentName:"p"},"Register<boolean>")," (packing format ",(0,a.kt)("inlineCode",{parentName:"p"},"u8"),")")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"read and write"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip",skip:!0},'import { Wifi } from "@devicescript/core"\n\nconst wifi = new Wifi()\n// ...\nconst value = await wifi.enabled.read()\nawait wifi.enabled.write(value)\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"track incoming values")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip",skip:!0},'import { Wifi } from "@devicescript/core"\n\nconst wifi = new Wifi()\n// ...\nwifi.enabled.subscribe(async (value) => {\n    ...\n})\n')),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"write")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"read")," will block until a server is bound to the client.")),(0,a.kt)("h3",{id:"ro:ipAddress"},"ipAddress"),(0,a.kt)("p",null,"0, 4 or 16 byte buffer with the IPv4 or IPv6 address assigned to device if any."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"type: ",(0,a.kt)("inlineCode",{parentName:"p"},"Register<Buffer>")," (packing format ",(0,a.kt)("inlineCode",{parentName:"p"},"b[16]"),")")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"track incoming values"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip",skip:!0},'import { Wifi } from "@devicescript/core"\n\nconst wifi = new Wifi()\n// ...\nwifi.ipAddress.subscribe(async (value) => {\n    ...\n})\n')),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"write")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"read")," will block until a server is bound to the client.")),(0,a.kt)("h3",{id:"const:eui48"},"eui48"),(0,a.kt)("p",null,'The 6-byte MAC address of the device. If a device does MAC address randomization it will have to "restart".'),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"type: ",(0,a.kt)("inlineCode",{parentName:"li"},"Register<Buffer>")," (packing format ",(0,a.kt)("inlineCode",{parentName:"li"},"b[6]"),")"),(0,a.kt)("li",{parentName:"ul"},"constant: the register value will not change (until the next reset)")),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"write")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"read")," will block until a server is bound to the client.")),(0,a.kt)("h3",{id:"ro:ssid"},"ssid"),(0,a.kt)("p",null,"SSID of the access-point to which device is currently connected.\nEmpty string if not connected."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"type: ",(0,a.kt)("inlineCode",{parentName:"p"},"Register<string>")," (packing format ",(0,a.kt)("inlineCode",{parentName:"p"},"s[32]"),")")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"read only"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip",skip:!0},'import { Wifi } from "@devicescript/core"\n\nconst wifi = new Wifi()\n// ...\nconst value = await wifi.ssid.read()\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"track incoming values")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip",skip:!0},'import { Wifi } from "@devicescript/core"\n\nconst wifi = new Wifi()\n// ...\nwifi.ssid.subscribe(async (value) => {\n    ...\n})\n')),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"write")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"read")," will block until a server is bound to the client.")),(0,a.kt)("h2",{id:"events"},"Events"),(0,a.kt)("h3",{id:"gotip"},"gotIp"),(0,a.kt)("p",null,"Emitted upon successful join and IP address assignment."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip no-run",skip:!0,"no-run":!0},"wifi.gotIp.subscribe(() => {\n\n})\n")),(0,a.kt)("h3",{id:"lostip"},"lostIp"),(0,a.kt)("p",null,"Emitted when disconnected from network."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip no-run",skip:!0,"no-run":!0},"wifi.lostIp.subscribe(() => {\n\n})\n")),(0,a.kt)("h3",{id:"scancomplete"},"scanComplete"),(0,a.kt)("p",null,"A WiFi network scan has completed. Results can be read with the ",(0,a.kt)("inlineCode",{parentName:"p"},"last_scan_results")," command.\nThe event indicates how many networks where found, and how many are considered\nas candidates for connection."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip no-run",skip:!0,"no-run":!0},"wifi.scanComplete.subscribe(() => {\n\n})\n")),(0,a.kt)("h3",{id:"networkschanged"},"networksChanged"),(0,a.kt)("p",null,"Emitted whenever the list of known networks is updated."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip no-run",skip:!0,"no-run":!0},"wifi.networksChanged.subscribe(() => {\n\n})\n")),(0,a.kt)("h3",{id:"connectionfailed"},"connectionFailed"),(0,a.kt)("p",null,"Emitted when when a network was detected in scan, the device tried to connect to it\nand failed.\nThis may be because of wrong password or other random failure."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip no-run",skip:!0,"no-run":!0},"wifi.connectionFailed.subscribe(() => {\n\n})\n")),(0,a.kt)("p",null))}u.isMDXComponent=!0}}]);