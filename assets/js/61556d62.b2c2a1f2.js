"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8244],{35318:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>k});var r=n(27378);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=s(n),u=a,k=d["".concat(p,".").concat(u)]||d[u]||m[u]||i;return n?r.createElement(k,o(o({ref:t},c),{},{components:n})):r.createElement(k,o({ref:t},c))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[d]="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4096:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var r=n(25773),a=(n(27378),n(35318));const i={pagination_prev:null,pagination_next:null,description:"DeviceScript client for Jacdac Control service"},o="Control",l={unversionedId:"api/clients/control",id:"api/clients/control",title:"Control",description:"DeviceScript client for Jacdac Control service",source:"@site/docs/api/clients/control.md",sourceDirName:"api/clients",slug:"/api/clients/control",permalink:"/devicescript/api/clients/control",draft:!1,tags:[],version:"current",frontMatter:{pagination_prev:null,pagination_next:null,description:"DeviceScript client for Jacdac Control service"},sidebar:"tutorialSidebar"},p={},s=[{value:"Commands",id:"commands",level:2},{value:"announce",id:"announce",level:3},{value:"noop",id:"noop",level:3},{value:"identify",id:"identify",level:3},{value:"reset",id:"reset",level:3},{value:"floodPing",id:"floodping",level:3},{value:"setStatusLight",id:"setstatuslight",level:3},{value:"proxy",id:"proxy",level:3},{value:"reliableCommands",id:"reliablecommands",level:3},{value:"standby",id:"standby",level:3},{value:"Registers",id:"registers",level:2},{value:"deviceDescription",id:"const:deviceDescription",level:3},{value:"productIdentifier",id:"const:productIdentifier",level:3},{value:"bootloaderProductIdentifier",id:"const:bootloaderProductIdentifier",level:3},{value:"firmwareVersion",id:"const:firmwareVersion",level:3},{value:"mcuTemperature",id:"ro:mcuTemperature",level:3},{value:"uptime",id:"ro:uptime",level:3}],c={toc:s},d="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"control"},"Control"),(0,a.kt)("p",null,"Control service is always service index ",(0,a.kt)("inlineCode",{parentName:"p"},"0"),".\nIt handles actions common to all services on a device."),(0,a.kt)("p",null,"Note: some of the optional features (including ",(0,a.kt)("inlineCode",{parentName:"p"},"flood_ping"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"mcu_temperature"),", and all string registers)\nare not implemented in ",(0,a.kt)("inlineCode",{parentName:"p"},"8bit")," version."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"client for ",(0,a.kt)("a",{parentName:"li",href:"https://microsoft.github.io/jacdac-docs/services/control/"},"Control service")),(0,a.kt)("li",{parentName:"ul"},"inherits Role")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { Control } from "@devicescript/core"\n\nconst control = new Control()\n')),(0,a.kt)("h2",{id:"commands"},"Commands"),(0,a.kt)("h3",{id:"announce"},"announce"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"restart_counter")," is computed from the ",(0,a.kt)("inlineCode",{parentName:"p"},"flags & RestartCounterSteady"),", starts at ",(0,a.kt)("inlineCode",{parentName:"p"},"0x1")," and increments by one until it reaches ",(0,a.kt)("inlineCode",{parentName:"p"},"0xf"),", then it stays at ",(0,a.kt)("inlineCode",{parentName:"p"},"0xf"),".\nIf this number ever goes down, it indicates that the device restarted.\n",(0,a.kt)("inlineCode",{parentName:"p"},"service_class")," indicates class identifier for each service index (service index ",(0,a.kt)("inlineCode",{parentName:"p"},"0")," is always control, so it's\nskipped in this enumeration).\n",(0,a.kt)("inlineCode",{parentName:"p"},"packet_count")," indicates the number of reports sent by the current device since last announce,\nincluding the current announce packet (it is always 0 if this feature is not supported).\nThe command form can be used to induce report, which is otherwise broadcast every 500ms."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip no-run",skip:!0,"no-run":!0},"control.announce(): Promise<void>\n")),(0,a.kt)("h3",{id:"noop"},"noop"),(0,a.kt)("p",null,"Do nothing. Always ignored. Can be used to test ACKs."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip no-run",skip:!0,"no-run":!0},"control.noop(): Promise<void>\n")),(0,a.kt)("h3",{id:"identify"},"identify"),(0,a.kt)("p",null,"Blink the status LED (262ms on, 262ms off, four times, with the blue LED) or otherwise draw user's attention to device with no status light.\nFor devices with status light (this can be discovered in the announce flags), the client should\nsend the sequence of status light command to generate the identify animation."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip no-run",skip:!0,"no-run":!0},"control.identify(): Promise<void>\n")),(0,a.kt)("h3",{id:"reset"},"reset"),(0,a.kt)("p",null,"Reset device. ACK may or may not be sent."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip no-run",skip:!0,"no-run":!0},"control.reset(): Promise<void>\n")),(0,a.kt)("h3",{id:"floodping"},"floodPing"),(0,a.kt)("p",null,"The device will respond ",(0,a.kt)("inlineCode",{parentName:"p"},"num_responses")," times, as fast as it can, setting the ",(0,a.kt)("inlineCode",{parentName:"p"},"counter")," field in the report\nto ",(0,a.kt)("inlineCode",{parentName:"p"},"start_counter"),", then ",(0,a.kt)("inlineCode",{parentName:"p"},"start_counter + 1"),", ..., and finally ",(0,a.kt)("inlineCode",{parentName:"p"},"start_counter + num_responses - 1"),".\nThe ",(0,a.kt)("inlineCode",{parentName:"p"},"dummy_payload")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"size")," bytes long and contains bytes ",(0,a.kt)("inlineCode",{parentName:"p"},"0, 1, 2, ..."),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip no-run",skip:!0,"no-run":!0},"control.floodPing(num_responses: number, start_counter: number, size: number): Promise<void>\n")),(0,a.kt)("h3",{id:"setstatuslight"},"setStatusLight"),(0,a.kt)("p",null,"Initiates a color transition of the status light from its current color to the one specified.\nThe transition will complete in about ",(0,a.kt)("inlineCode",{parentName:"p"},"512 / speed")," frames\n(each frame is currently 100ms, so speed of ",(0,a.kt)("inlineCode",{parentName:"p"},"51")," is about 1 second and ",(0,a.kt)("inlineCode",{parentName:"p"},"26")," 0.5 second).\nAs a special case, if speed is ",(0,a.kt)("inlineCode",{parentName:"p"},"0")," the transition is immediate.\nIf MCU is not capable of executing transitions, it can consider ",(0,a.kt)("inlineCode",{parentName:"p"},"speed")," to be always ",(0,a.kt)("inlineCode",{parentName:"p"},"0"),".\nIf a monochrome LEDs is fitted, the average value of ",(0,a.kt)("inlineCode",{parentName:"p"},"red"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"green"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"blue")," is used.\nIf intensity of a monochrome LED cannot be controlled, any value larger than ",(0,a.kt)("inlineCode",{parentName:"p"},"0")," should be considered\non, and ",(0,a.kt)("inlineCode",{parentName:"p"},"0")," (for all three channels) should be considered off."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip no-run",skip:!0,"no-run":!0},"control.setStatusLight(to_red: number, to_green: number, to_blue: number, speed: number): Promise<void>\n")),(0,a.kt)("h3",{id:"proxy"},"proxy"),(0,a.kt)("p",null,"Force client device into proxy mode."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip no-run",skip:!0,"no-run":!0},"control.proxy(): Promise<void>\n")),(0,a.kt)("h3",{id:"reliablecommands"},"reliableCommands"),(0,a.kt)("p",null,"This opens a pipe to the device to provide an alternative, reliable transport of actions\n(and possibly other commands).\nThe commands are wrapped as pipe data packets.\nMultiple invocations of this command with the same ",(0,a.kt)("inlineCode",{parentName:"p"},"seed")," are dropped\n(and thus the command is not ",(0,a.kt)("inlineCode",{parentName:"p"},"unique"),"); otherwise ",(0,a.kt)("inlineCode",{parentName:"p"},"seed")," carries no meaning\nand should be set to a random value by the client.\nNote that while the commands sends this way are delivered exactly once, the\nresponses might get lost."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip no-run",skip:!0,"no-run":!0},"control.reliableCommands(seed: number): Promise<void>\n")),(0,a.kt)("h3",{id:"standby"},"standby"),(0,a.kt)("p",null,"Attempt to put devices into lowest power sleep mode for a specified time - most likely involving a full reset on wake-up."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip no-run",skip:!0,"no-run":!0},"control.standby(duration: number): Promise<void>\n")),(0,a.kt)("h2",{id:"registers"},"Registers"),(0,a.kt)("h3",{id:"const:deviceDescription"},"deviceDescription"),(0,a.kt)("p",null,"Identifies the type of hardware (eg., ACME Corp. Servo X-42 Rev C)"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"type: ",(0,a.kt)("inlineCode",{parentName:"p"},"Register<string>")," (packing format ",(0,a.kt)("inlineCode",{parentName:"p"},"s"),")")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"optional: this register may not be implemented")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"constant: the register value will not change (until the next reset)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"read only"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { Control } from "@devicescript/core"\n\nconst control = new Control()\n// ...\nconst value = await control.deviceDescription.read()\n')),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"write")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"read")," will block until a server is bound to the client.")),(0,a.kt)("h3",{id:"const:productIdentifier"},"productIdentifier"),(0,a.kt)("p",null,"A numeric code for the string above; used to identify firmware images and devices."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"type: ",(0,a.kt)("inlineCode",{parentName:"p"},"Register<number>")," (packing format ",(0,a.kt)("inlineCode",{parentName:"p"},"u32"),")")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"optional: this register may not be implemented")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"constant: the register value will not change (until the next reset)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"read only"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { Control } from "@devicescript/core"\n\nconst control = new Control()\n// ...\nconst value = await control.productIdentifier.read()\n')),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"write")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"read")," will block until a server is bound to the client.")),(0,a.kt)("h3",{id:"const:bootloaderProductIdentifier"},"bootloaderProductIdentifier"),(0,a.kt)("p",null,"Typically the same as ",(0,a.kt)("inlineCode",{parentName:"p"},"product_identifier")," unless device was flashed by hand; the bootloader will respond to that code."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"type: ",(0,a.kt)("inlineCode",{parentName:"p"},"Register<number>")," (packing format ",(0,a.kt)("inlineCode",{parentName:"p"},"u32"),")")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"optional: this register may not be implemented")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"constant: the register value will not change (until the next reset)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"read only"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { Control } from "@devicescript/core"\n\nconst control = new Control()\n// ...\nconst value = await control.bootloaderProductIdentifier.read()\n')),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"write")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"read")," will block until a server is bound to the client.")),(0,a.kt)("h3",{id:"const:firmwareVersion"},"firmwareVersion"),(0,a.kt)("p",null,"A string describing firmware version; typically semver."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"type: ",(0,a.kt)("inlineCode",{parentName:"p"},"Register<string>")," (packing format ",(0,a.kt)("inlineCode",{parentName:"p"},"s"),")")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"optional: this register may not be implemented")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"constant: the register value will not change (until the next reset)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"read only"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { Control } from "@devicescript/core"\n\nconst control = new Control()\n// ...\nconst value = await control.firmwareVersion.read()\n')),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"write")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"read")," will block until a server is bound to the client.")),(0,a.kt)("h3",{id:"ro:mcuTemperature"},"mcuTemperature"),(0,a.kt)("p",null,"MCU temperature in degrees Celsius (approximate)."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"type: ",(0,a.kt)("inlineCode",{parentName:"p"},"Register<number>")," (packing format ",(0,a.kt)("inlineCode",{parentName:"p"},"i16"),")")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"optional: this register may not be implemented")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"read only"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { Control } from "@devicescript/core"\n\nconst control = new Control()\n// ...\nconst value = await control.mcuTemperature.read()\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"track incoming values")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { Control } from "@devicescript/core"\n\nconst control = new Control()\n// ...\ncontrol.mcuTemperature.subscribe(async (value) => {\n    ...\n})\n')),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"write")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"read")," will block until a server is bound to the client.")),(0,a.kt)("h3",{id:"ro:uptime"},"uptime"),(0,a.kt)("p",null,"Number of microseconds since boot."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"type: ",(0,a.kt)("inlineCode",{parentName:"p"},"Register<number>")," (packing format ",(0,a.kt)("inlineCode",{parentName:"p"},"u64"),")")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"optional: this register may not be implemented")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"read only"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { Control } from "@devicescript/core"\n\nconst control = new Control()\n// ...\nconst value = await control.uptime.read()\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"track incoming values")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { Control } from "@devicescript/core"\n\nconst control = new Control()\n// ...\ncontrol.uptime.subscribe(async (value) => {\n    ...\n})\n')),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"write")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"read")," will block until a server is bound to the client.")),(0,a.kt)("p",null))}m.isMDXComponent=!0}}]);