"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4842],{35318:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>g});var n=r(27378);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=l(r),u=i,g=m["".concat(c,".").concat(u)]||m[u]||d[u]||a;return r?n.createElement(g,s(s({ref:t},p),{},{components:r})):n.createElement(g,s({ref:t},p))}));function g(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,s=new Array(a);s[0]=u;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o[m]="string"==typeof e?e:i,s[1]=o;for(var l=2;l<a;l++)s[l]=r[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},58100:(e,t,r)=>{r.d(t,{Z:()=>a});var n=r(27378);const i={borderRadius:"0.5rem",marginTop:"1rem",marginBottom:"1rem",maxHeight:"40rem",maxWidth:"40rem"};function a(e){const{name:t,style:r=i,webm:a}=e,s=(0,n.useRef)(null);return n.createElement("video",{ref:s,style:r,poster:`/devicescript/videos/${t}.jpg`,playsInline:!0,controls:!0,preload:"metadata"},n.createElement("source",{src:`/devicescript/videos/${t}.mp4`,type:"video/mp4"}),n.createElement("p",null,"Your browser doesn't support HTML video. Here is a",n.createElement("a",{href:`/devicescript/videos/${t}.mp4`},"link to the video")," ","instead."))}},44030:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>c,toc:()=>p});var n=r(25773),i=(r(27378),r(35318)),a=r(58100);const s={sidebar_position:2,description:"Learn how to create the classic LED blinking program on Raspberry Pi Pico and ESP32 using DeviceScript.",keywords:["Raspberry Pi Pico","ESP32","LED blinking","DeviceScript","microcontroller programming"]},o="Blinky",c={unversionedId:"getting-started/samples/blinky",id:"getting-started/samples/blinky",title:"Blinky",description:"Learn how to create the classic LED blinking program on Raspberry Pi Pico and ESP32 using DeviceScript.",source:"@site/docs/getting-started/samples/blinky.mdx",sourceDirName:"getting-started/samples",slug:"/getting-started/samples/blinky",permalink:"/devicescript/getting-started/samples/blinky",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,description:"Learn how to create the classic LED blinking program on Raspberry Pi Pico and ESP32 using DeviceScript.",keywords:["Raspberry Pi Pico","ESP32","LED blinking","DeviceScript","microcontroller programming"]},sidebar:"tutorialSidebar",previous:{title:"Samples",permalink:"/devicescript/getting-started/samples/"},next:{title:"Copy Paste Button",permalink:"/devicescript/getting-started/samples/copy-paste-button"}},l={},p=[{value:"ESP32",id:"esp32",level:2}],m={toc:p},d="wrapper";function u(e){let{components:t,...r}=e;return(0,i.kt)(d,(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"blinky"},"Blinky"),(0,i.kt)("p",null,"The classic LED blinking program on a ",(0,i.kt)("a",{parentName:"p",href:"/devices/rp2040"},"Raspberry Pi Pico"),". The LED is connected to the Pico's pin GP1 (2 on the silk)"),(0,i.kt)(a.Z,{name:"blinky",mdxType:"StaticVideo"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import { pins } from "@dsboard/pico"\nimport { startLightBulb } from "@devicescript/servers"\n\n// start a lightbulb server on pin GP1\n// and store client in `led` variable\nconst led = startLightBulb({\n    pin: pins.P1,\n})\n\n// start interval timer every 1000ms\nsetInterval(async () => {\n    // read current brightness\n    const brightness = await led.intensity.read()\n    // toggle on/off\n    const newbrightness = brightness > 0 ? 0 : 1\n    // apply new brightness\n    await led.intensity.write(newbrightness)\n}, 1000)\n')),(0,i.kt)("h2",{id:"esp32"},"ESP32"),(0,i.kt)("p",null,"The classic LED blinking program on a ",(0,i.kt)("a",{parentName:"p",href:"/devices/esp32"},"ESP32"),"\nis similar. The LED is connected to the pin ",(0,i.kt)("inlineCode",{parentName:"p"},"A0"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import { pins } from "@dsboard/adafruit_qt_py_c3"\nimport { startLightBulb } from "@devicescript/servers"\n\nconst lightBulb = startLightBulb({\n    pin: pins.A0,\n})\n\nsetInterval(async () => {\n    await lightBulb.toggle()\n}, 500)\n')))}u.isMDXComponent=!0}}]);