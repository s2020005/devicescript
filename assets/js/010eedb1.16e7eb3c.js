"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3775],{35318:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>g});var n=r(27378);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(r),m=a,g=u["".concat(l,".").concat(m)]||u[m]||d[m]||i;return r?n.createElement(g,s(s({ref:t},p),{},{components:r})):n.createElement(g,s({ref:t},p))}));function g(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,s=new Array(i);s[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[u]="string"==typeof e?e:a,s[1]=o;for(var c=2;c<i;c++)s[c]=r[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},32243:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var n=r(25773),a=(r(27378),r(35318));const i={sidebar_position:1},s="Registers",o={unversionedId:"api/core/registers",id:"api/core/registers",title:"Registers",description:"The register client classe (Register) allow to read, write and track changes of service registers.",source:"@site/docs/api/core/registers.md",sourceDirName:"api/core",slug:"/api/core/registers",permalink:"/devicescript/api/core/registers",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Roles",permalink:"/devicescript/api/core/roles"},next:{title:"Events",permalink:"/devicescript/api/core/events"}},l={},c=[{value:"read",id:"read",level:2},{value:"write",id:"write",level:2},{value:"subscribe",id:"subscribe",level:2}],p={toc:c},u="wrapper";function d(e){let{components:t,...r}=e;return(0,a.kt)(u,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"registers"},"Registers"),(0,a.kt)("p",null,"The register client classe (",(0,a.kt)("inlineCode",{parentName:"p"},"Register<T>"),") allow to read, write and track changes of ",(0,a.kt)("a",{parentName:"p",href:"https://microsoft.github.io/jacdac-docs/reference/protocol/#registers"},"service registers"),"."),(0,a.kt)("p",null,"Aside from the data type, there are 3 different type of access control on registers:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"read only"),": the value can be read, but not written."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"read write"),": the value can be read and writen."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"const"),": the value of the register is constant. It may change on the next reset but this is not a common scenario.")),(0,a.kt)("h2",{id:"read"},"read"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"read")," method gets the current reported value stored in the register."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const sensor = new ds.Temperature()\nsetInterval(async () => {\n    const t = await sensor.reading.read()\n    console.log(t)\n}, 1000)\n")),(0,a.kt)("h2",{id:"write"},"write"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"write")," method sets the current value of the register and only applies to ",(0,a.kt)("inlineCode",{parentName:"p"},"read-write")," registers."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const led = new ds.Led()\n\nawait led.intensity.write(0.5)\n")),(0,a.kt)("h2",{id:"subscribe"},"subscribe"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"subscribe")," method registers a callback that gets raised whenever a value update arrives."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const sensor = new ds.Temperature()\nsensor.reading.subscribe(value => {\n    console.log(value)\n})\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"subscribe")," method returns an ",(0,a.kt)("strong",{parentName:"p"},"unsubscribe")," function that allows to remove the callback."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const sensor = new ds.Temperature()\nconst unsubscribe = sensor.reading.subscribe(value => {\n    console.log(value)\n})\n\n// later on\nunsubscribe()\n")))}d.isMDXComponent=!0}}]);