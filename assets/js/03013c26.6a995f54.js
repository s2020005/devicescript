"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8766],{35318:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>f});var r=n(27378);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=p(n),g=i,f=d["".concat(c,".").concat(g)]||d[g]||u[g]||o;return n?r.createElement(f,a(a({ref:t},l),{},{components:n})):r.createElement(f,a({ref:t},l))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=g;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[d]="string"==typeof e?e:i,a[1]=s;for(var p=2;p<o;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},35995:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=n(25773),i=(n(27378),n(35318));const o={sidebar_position:3,description:"Understanding the differences between ECMAScript and DeviceScript in handling strings, Unicode, and UTF-16 code units.",keywords:["ECMAScript","DeviceScript","strings","Unicode","UTF-16"]},a="Strings and Unicode",s={unversionedId:"language/strings",id:"language/strings",title:"Strings and Unicode",description:"Understanding the differences between ECMAScript and DeviceScript in handling strings, Unicode, and UTF-16 code units.",source:"@site/docs/language/strings.mdx",sourceDirName:"language",slug:"/language/strings",permalink:"/devicescript/language/strings",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,description:"Understanding the differences between ECMAScript and DeviceScript in handling strings, Unicode, and UTF-16 code units.",keywords:["ECMAScript","DeviceScript","strings","Unicode","UTF-16"]},sidebar:"tutorialSidebar",previous:{title:"toString() method",permalink:"/devicescript/language/tostring"},next:{title:"Special objects",permalink:"/devicescript/language/special"}},c={},p=[],l={toc:p},d="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"strings-and-unicode"},"Strings and Unicode"),(0,i.kt)("p",null,"ECMAScript spec requires ",(0,i.kt)("inlineCode",{parentName:"p"},"String.charCodeAt()")," to return a 16-bit value.\nUnicode code points outside of 16-bit (mostly emoticons, but also some historical alphabets,\nand rare Chinese/Japanese/Korean ideograms) are represented as surrogate pairs of two 16-bit code units.\nThe ",(0,i.kt)("inlineCode",{parentName:"p"},"String.length")," returns the number of UTF-16 code units in the string."),(0,i.kt)("p",null,"If ES was designed today they would probably return up to 21-bit values from ",(0,i.kt)("inlineCode",{parentName:"p"},"charCodeAt()"),",\nor possibly use yet another abstraction since even with full 21-bit Unicode,\nseveral code points can still combine into a single glyph (character displayed on the screen). "),(0,i.kt)("p",null,"In DeviceScript,\nthe method ",(0,i.kt)("inlineCode",{parentName:"p"},"String.charCodeAt()")," returns Unicode code point (up to 21 bits), not UTF-16 character.\nSimilarly, ",(0,i.kt)("inlineCode",{parentName:"p"},"String.length")," will return the number of 21-bit code points.\nThus, ",(0,i.kt)("inlineCode",{parentName:"p"},'"\ud83d\uddfd".length === 1')," and ",(0,i.kt)("inlineCode",{parentName:"p"},'"\ud83d\uddfd".charCodeAt(0) === 0x1f5fd'),",\nand also ",(0,i.kt)("inlineCode",{parentName:"p"},'"\\uD83D\\uDDFD".length === 1')," since ",(0,i.kt)("inlineCode",{parentName:"p"},'"\\uD83D\\uDDFD" === "\ud83d\uddfd"')," which may be confusing."),(0,i.kt)("p",null,"Also string ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/microsoft/devicescript/issues/39"},"construction by concatnation quadratic"),",\nhowever you can use ",(0,i.kt)("inlineCode",{parentName:"p"},"String.join()")," which is linear in the size of output."),(0,i.kt)("p",null,"See also ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/microsoft/devicescript/discussions/34"},"discussion"),"."))}u.isMDXComponent=!0}}]);