"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9767],{35318:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>v});var r=n(27378);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),u=s(n),g=i,v=u["".concat(l,".").concat(g)]||u[g]||d[g]||o;return n?r.createElement(v,p(p({ref:t},c),{},{components:n})):r.createElement(v,p({ref:t},c))}));function v(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,p=new Array(o);p[0]=g;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a[u]="string"==typeof e?e:i,p[1]=a;for(var s=2;s<o;s++)p[s]=n[s];return r.createElement.apply(null,p)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},23894:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>p,default:()=>d,frontMatter:()=>o,metadata:()=>a,toc:()=>s});var r=n(25773),i=(n(27378),n(35318));const o={description:"Digital GPIO",title:"Digital IO",sidebar_position:49},p="Digital IO",a={unversionedId:"developer/servers/digital-io",id:"developer/servers/digital-io",title:"Digital IO",description:"Digital GPIO",source:"@site/docs/developer/servers/digital-io.mdx",sourceDirName:"developer/servers",slug:"/developer/servers/digital-io",permalink:"/devicescript/developer/servers/digital-io",draft:!1,tags:[],version:"current",sidebarPosition:49,frontMatter:{description:"Digital GPIO",title:"Digital IO",sidebar_position:49},sidebar:"tutorialSidebar",previous:{title:"Analog",permalink:"/devicescript/developer/servers/analog"},next:{title:"I2C",permalink:"/devicescript/developer/servers/i2c"}},l={},s=[{value:"Mode",id:"mode",level:2},{value:"Output",id:"output",level:2},{value:"Input",id:"input",level:2}],c={toc:s},u="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"digital-io"},"Digital IO"),(0,i.kt)("p",null,"DeviceScript provides access to digital GPIO (General Purpose Input/Output) operations\non ",(0,i.kt)("a",{parentName:"p",href:"/developer/servers/pins"},"pins"),", that do not require precise real time timings."),(0,i.kt)("p",null,"It is recommend to encapsulate the GPIO access into server implementation as they are rather low level."),(0,i.kt)("h2",{id:"mode"},"Mode"),(0,i.kt)("p",null,"The pin can be access through the generic ",(0,i.kt)("inlineCode",{parentName:"p"},"gpio")," function or through board specific packages\nthat provide predefined pin mappings (see ",(0,i.kt)("a",{parentName:"p",href:"pins"},"pins"),")."),(0,i.kt)("p",null,"You can configure the input/output mode through ",(0,i.kt)("inlineCode",{parentName:"p"},"setMode"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import { gpio, GPIOMode } from "@devicescript/core"\nimport "@devicescript/gpio"\n\n// p0 -> output\nconst p0 = gpio(0)\n// highlight-next-line\nawait p0.setMode(GPIOMode.Output)\n\n// P1 -> input\nconst p1 = gpio(1)\n// highlight-next-line\nawait p1.setMode(GPIOMode.Input)\n')),(0,i.kt)("h2",{id:"output"},"Output"),(0,i.kt)("p",null,"Use ",(0,i.kt)("inlineCode",{parentName:"p"},"write")," to set the output value of a pin. This example flips a pin state every second."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import { gpio, GPIOMode } from "@devicescript/core"\nimport "@devicescript/gpio"\n\nconst p0 = gpio(0)\nawait p0.setMode(GPIOMode.Output)\n\nlet loop = 0\nsetInterval(async () => {\n    // highlight-next-line\n    await p0.write(loop++ % 2)\n}, 1000)\n')),(0,i.kt)("h2",{id:"input"},"Input"),(0,i.kt)("p",null,"Use ",(0,i.kt)("inlineCode",{parentName:"p"},"read")," to read the input value of a pin. This example reads the input value every second."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import { gpio, GPIOMode } from "@devicescript/core"\nimport "@devicescript/gpio"\n\nconst p1 = gpio(1)\nawait p1.setMode(GPIOMode.Input)\n\n// polling read pin\nsetInterval(async () => {\n    // higlight-next-line\n    const v = await p1.read()\n    console.log({ poll: v })\n}, 1000)\n')),(0,i.kt)("p",null,"Use ",(0,i.kt)("inlineCode",{parentName:"p"},"subscribe")," to run code whenever the pin changes state."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import { gpio, GPIOMode } from "@devicescript/core"\nimport "@devicescript/gpio"\n\nconst p1 = gpio(1)\nawait p1.setMode(GPIOMode.Input)\n\n// highlight-next-line\np1.subscribe(v => console.log({ sub: v }))\n')))}d.isMDXComponent=!0}}]);