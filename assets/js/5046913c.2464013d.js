"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9531],{35318:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>k});var i=t(27378);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=i.createContext({}),d=function(e){var n=i.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},s=function(e){var n=d(e.components);return i.createElement(o.Provider,{value:n},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},u=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,o=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),c=d(t),u=r,k=c["".concat(o,".").concat(u)]||c[u]||m[u]||a;return t?i.createElement(k,l(l({ref:n},s),{},{components:t})):i.createElement(k,l({ref:n},s))}));function k(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,l=new Array(a);l[0]=u;var p={};for(var o in n)hasOwnProperty.call(n,o)&&(p[o]=n[o]);p.originalType=e,p[c]="string"==typeof e?e:r,l[1]=p;for(var d=2;d<a;d++)l[d]=t[d];return i.createElement.apply(null,l)}return i.createElement.apply(null,t)}u.displayName="MDXCreateElement"},57213:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>m,frontMatter:()=>a,metadata:()=>p,toc:()=>d});var i=t(25773),r=(t(27378),t(35318));const a={pagination_prev:null,pagination_next:null,description:"DeviceScript client for Jacdac Indexed screen service"},l="IndexedScreen",p={unversionedId:"api/clients/indexedscreen",id:"api/clients/indexedscreen",title:"IndexedScreen",description:"DeviceScript client for Jacdac Indexed screen service",source:"@site/docs/api/clients/indexedscreen.md",sourceDirName:"api/clients",slug:"/api/clients/indexedscreen",permalink:"/devicescript/api/clients/indexedscreen",draft:!1,tags:[],version:"current",frontMatter:{pagination_prev:null,pagination_next:null,description:"DeviceScript client for Jacdac Indexed screen service"},sidebar:"tutorialSidebar"},o={},d=[{value:"Commands",id:"commands",level:2},{value:"startUpdate",id:"startupdate",level:3},{value:"setPixels",id:"setpixels",level:3},{value:"Registers",id:"registers",level:2},{value:"intensity",id:"rw:intensity",level:3},{value:"palette",id:"rw:palette",level:3},{value:"bitsPerPixel",id:"const:bitsPerPixel",level:3},{value:"width",id:"const:width",level:3},{value:"height",id:"const:height",level:3},{value:"widthMajor",id:"rw:widthMajor",level:3},{value:"upSampling",id:"rw:upSampling",level:3},{value:"rotation",id:"rw:rotation",level:3}],s={toc:d},c="wrapper";function m(e){let{components:n,...t}=e;return(0,r.kt)(c,(0,i.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"indexedscreen"},"IndexedScreen"),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"This service is rc and may change in the future.")),(0,r.kt)("p",null,"A screen with indexed colors."),(0,r.kt)("p",null,"This is often run over an SPI connection, not regular single-wire Jacdac."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"client for ",(0,r.kt)("a",{parentName:"li",href:"https://microsoft.github.io/jacdac-docs/services/indexedscreen/"},"Indexed screen service")),(0,r.kt)("li",{parentName:"ul"},"inherits Role")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { IndexedScreen } from "@devicescript/core"\n\nconst indexedScreen = new IndexedScreen()\n')),(0,r.kt)("h2",{id:"commands"},"Commands"),(0,r.kt)("h3",{id:"startupdate"},"startUpdate"),(0,r.kt)("p",null,"Sets the update window for subsequent ",(0,r.kt)("inlineCode",{parentName:"p"},"set_pixels")," commands."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip no-run",skip:!0,"no-run":!0},"indexedScreen.startUpdate(x: number, y: number, width: number, height: number): Promise<void>\n")),(0,r.kt)("h3",{id:"setpixels"},"setPixels"),(0,r.kt)("p",null,'Set pixels in current window, according to current palette.\nEach "line" of data is aligned to a byte.'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip no-run",skip:!0,"no-run":!0},"indexedScreen.setPixels(pixels: Buffer): Promise<void>\n")),(0,r.kt)("h2",{id:"registers"},"Registers"),(0,r.kt)("h3",{id:"rw:intensity"},"intensity"),(0,r.kt)("p",null,"Set backlight brightness.\nIf set to ",(0,r.kt)("inlineCode",{parentName:"p"},"0")," the display may go to sleep."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"type: ",(0,r.kt)("inlineCode",{parentName:"p"},"Register<number>")," (packing format ",(0,r.kt)("inlineCode",{parentName:"p"},"u0.8"),")")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"read and write"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip",skip:!0},'import { IndexedScreen } from "@devicescript/core"\n\nconst indexedScreen = new IndexedScreen()\n// ...\nconst value = await indexedScreen.intensity.read()\nawait indexedScreen.intensity.write(value)\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"track incoming values")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip",skip:!0},'import { IndexedScreen } from "@devicescript/core"\n\nconst indexedScreen = new IndexedScreen()\n// ...\nindexedScreen.intensity.subscribe(async (value) => {\n    ...\n})\n')),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"write")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"read")," will block until a server is bound to the client.")),(0,r.kt)("h3",{id:"rw:palette"},"palette"),(0,r.kt)("p",null,"The current palette.\nThe color entry repeats ",(0,r.kt)("inlineCode",{parentName:"p"},"1 << bits_per_pixel")," times.\nThis register may be write-only."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"type: ",(0,r.kt)("inlineCode",{parentName:"p"},"Register<any[]>")," (packing format ",(0,r.kt)("inlineCode",{parentName:"p"},"r: u8 u8 u8 u8"),")")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"track incoming values"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip",skip:!0},'import { IndexedScreen } from "@devicescript/core"\n\nconst indexedScreen = new IndexedScreen()\n// ...\nindexedScreen.palette.subscribe(async (value) => {\n    ...\n})\n')),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"write")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"read")," will block until a server is bound to the client.")),(0,r.kt)("h3",{id:"const:bitsPerPixel"},"bitsPerPixel"),(0,r.kt)("p",null,"Determines the number of palette entries.\nTypical values are 1, 2, 4, or 8."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"type: ",(0,r.kt)("inlineCode",{parentName:"p"},"Register<number>")," (packing format ",(0,r.kt)("inlineCode",{parentName:"p"},"u8"),")")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"constant: the register value will not change (until the next reset)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"read only"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip",skip:!0},'import { IndexedScreen } from "@devicescript/core"\n\nconst indexedScreen = new IndexedScreen()\n// ...\nconst value = await indexedScreen.bitsPerPixel.read()\n')),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"write")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"read")," will block until a server is bound to the client.")),(0,r.kt)("h3",{id:"const:width"},"width"),(0,r.kt)("p",null,'Screen width in "natural" orientation.'),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"type: ",(0,r.kt)("inlineCode",{parentName:"p"},"Register<number>")," (packing format ",(0,r.kt)("inlineCode",{parentName:"p"},"u16"),")")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"constant: the register value will not change (until the next reset)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"read only"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip",skip:!0},'import { IndexedScreen } from "@devicescript/core"\n\nconst indexedScreen = new IndexedScreen()\n// ...\nconst value = await indexedScreen.width.read()\n')),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"write")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"read")," will block until a server is bound to the client.")),(0,r.kt)("h3",{id:"const:height"},"height"),(0,r.kt)("p",null,'Screen height in "natural" orientation.'),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"type: ",(0,r.kt)("inlineCode",{parentName:"p"},"Register<number>")," (packing format ",(0,r.kt)("inlineCode",{parentName:"p"},"u16"),")")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"constant: the register value will not change (until the next reset)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"read only"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip",skip:!0},'import { IndexedScreen } from "@devicescript/core"\n\nconst indexedScreen = new IndexedScreen()\n// ...\nconst value = await indexedScreen.height.read()\n')),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"write")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"read")," will block until a server is bound to the client.")),(0,r.kt)("h3",{id:"rw:widthMajor"},"widthMajor"),(0,r.kt)("p",null,'If true, consecutive pixels in the "width" direction are sent next to each other (this is typical for graphics cards).\nIf false, consecutive pixels in the "height" direction are sent next to each other.\nFor embedded screen controllers, this is typically true iff ',(0,r.kt)("inlineCode",{parentName:"p"},"width < height"),"\n(in other words, it's only true for portrait orientation screens).\nSome controllers may allow the user to change this (though the refresh order may not be optimal then).\nThis is independent of the ",(0,r.kt)("inlineCode",{parentName:"p"},"rotation")," register."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"type: ",(0,r.kt)("inlineCode",{parentName:"p"},"Register<boolean>")," (packing format ",(0,r.kt)("inlineCode",{parentName:"p"},"u8"),")")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"read and write"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip",skip:!0},'import { IndexedScreen } from "@devicescript/core"\n\nconst indexedScreen = new IndexedScreen()\n// ...\nconst value = await indexedScreen.widthMajor.read()\nawait indexedScreen.widthMajor.write(value)\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"track incoming values")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip",skip:!0},'import { IndexedScreen } from "@devicescript/core"\n\nconst indexedScreen = new IndexedScreen()\n// ...\nindexedScreen.widthMajor.subscribe(async (value) => {\n    ...\n})\n')),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"write")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"read")," will block until a server is bound to the client.")),(0,r.kt)("h3",{id:"rw:upSampling"},"upSampling"),(0,r.kt)("p",null,"Every pixel sent over wire is represented by ",(0,r.kt)("inlineCode",{parentName:"p"},"up_sampling x up_sampling")," square of physical pixels.\nSome displays may allow changing this (which will also result in changes to ",(0,r.kt)("inlineCode",{parentName:"p"},"width")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"height"),").\nTypical values are 1 and 2."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"type: ",(0,r.kt)("inlineCode",{parentName:"p"},"Register<number>")," (packing format ",(0,r.kt)("inlineCode",{parentName:"p"},"u8"),")")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"read and write"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip",skip:!0},'import { IndexedScreen } from "@devicescript/core"\n\nconst indexedScreen = new IndexedScreen()\n// ...\nconst value = await indexedScreen.upSampling.read()\nawait indexedScreen.upSampling.write(value)\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"track incoming values")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip",skip:!0},'import { IndexedScreen } from "@devicescript/core"\n\nconst indexedScreen = new IndexedScreen()\n// ...\nindexedScreen.upSampling.subscribe(async (value) => {\n    ...\n})\n')),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"write")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"read")," will block until a server is bound to the client.")),(0,r.kt)("h3",{id:"rw:rotation"},"rotation"),(0,r.kt)("p",null,"Possible values are 0, 90, 180 and 270 only.\nWrite to this register do not affect ",(0,r.kt)("inlineCode",{parentName:"p"},"width")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"height")," registers,\nand may be ignored by some screens."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"type: ",(0,r.kt)("inlineCode",{parentName:"p"},"Register<number>")," (packing format ",(0,r.kt)("inlineCode",{parentName:"p"},"u16"),")")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"read and write"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip",skip:!0},'import { IndexedScreen } from "@devicescript/core"\n\nconst indexedScreen = new IndexedScreen()\n// ...\nconst value = await indexedScreen.rotation.read()\nawait indexedScreen.rotation.write(value)\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"track incoming values")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip",skip:!0},'import { IndexedScreen } from "@devicescript/core"\n\nconst indexedScreen = new IndexedScreen()\n// ...\nindexedScreen.rotation.subscribe(async (value) => {\n    ...\n})\n')),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"write")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"read")," will block until a server is bound to the client.")),(0,r.kt)("p",null))}m.isMDXComponent=!0}}]);