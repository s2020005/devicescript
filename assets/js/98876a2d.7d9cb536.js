"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3032],{35318:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>f});var r=n(27378);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,f=u["".concat(c,".").concat(m)]||u[m]||d[m]||i;return n?r.createElement(f,o(o({ref:t},l),{},{components:n})):r.createElement(f,o({ref:t},l))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[u]="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2805:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var r=n(25773),a=(n(27378),n(35318));const i={sidebar_position:1,description:"Learn the differences between DeviceScript and JavaScript in handling async/await and promises, and how fibers are used in DeviceScript.",keywords:["DeviceScript","async/await","promises","fibers","JavaScript"]},o="Async/await and promises",s={unversionedId:"language/async",id:"language/async",title:"Async/await and promises",description:"Learn the differences between DeviceScript and JavaScript in handling async/await and promises, and how fibers are used in DeviceScript.",source:"@site/docs/language/async.mdx",sourceDirName:"language",slug:"/language/async",permalink:"/devicescript/language/async",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,description:"Learn the differences between DeviceScript and JavaScript in handling async/await and promises, and how fibers are used in DeviceScript.",keywords:["DeviceScript","async/await","promises","fibers","JavaScript"]},sidebar:"tutorialSidebar",previous:{title:"DeviceScript Language",permalink:"/devicescript/language/"},next:{title:"toString() method",permalink:"/devicescript/language/tostring"}},c={},p=[],l={toc:p},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"asyncawait-and-promises"},"Async/await and promises"),(0,a.kt)("p",null,"The main difference in semantics between DeviceScript and JavaScript is that DeviceScript programs run in multiple fibers (threads).\nIn practice, this behaves like JS with ",(0,a.kt)("inlineCode",{parentName:"p"},"async"),"/",(0,a.kt)("inlineCode",{parentName:"p"},"await")," but without an ability to manipulate promises directly\n(that is fibers can only interleave at ",(0,a.kt)("inlineCode",{parentName:"p"},"await")," points and at most one fiber runs at any given time)."),(0,a.kt)("p",null,"The compiler enforces usage of ",(0,a.kt)("inlineCode",{parentName:"p"},"await")," where needed.\nThe ",(0,a.kt)("inlineCode",{parentName:"p"},"Promise<T>")," is still used just as in TypeScript, but it has no properties."),(0,a.kt)("p",null,"Technically, the interpreter implements fibers internally (they can be accessed through ",(0,a.kt)("inlineCode",{parentName:"p"},"ds.Fiber")," class),\nthe ",(0,a.kt)("inlineCode",{parentName:"p"},"await")," keyword is no-op and the ",(0,a.kt)("inlineCode",{parentName:"p"},"Promise")," type has no runtime representation.\nYou can inspect the currently running fibers in the debugger\nand stack traces are not cut at ",(0,a.kt)("inlineCode",{parentName:"p"},"await")," points (both of which match programmers general (if not JS-specific) expectations)."),(0,a.kt)("p",null,"You can use ",(0,a.kt)("inlineCode",{parentName:"p"},"Function.start(...args: any[])")," to start an async or sync function in a new fiber.\nIt will begin executing only after the current fiber hits an ",(0,a.kt)("inlineCode",{parentName:"p"},"await")," (",(0,a.kt)("inlineCode",{parentName:"p"},".start()")," itself is not ",(0,a.kt)("inlineCode",{parentName:"p"},"async"),")."))}d.isMDXComponent=!0}}]);