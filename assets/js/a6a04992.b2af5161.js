"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4146],{35318:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>b});var s=n(27378);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,s,r=function(e,t){if(null==e)return{};var n,s,r={},i=Object.keys(e);for(s=0;s<i.length;s++)n=i[s],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(s=0;s<i.length;s++)n=i[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=s.createContext({}),u=function(e){var t=s.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return s.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},m=s.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),p=u(n),m=r,b=p["".concat(l,".").concat(m)]||p[m]||d[m]||i;return n?s.createElement(b,o(o({ref:t},c),{},{components:n})):s.createElement(b,o({ref:t},c))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a[p]="string"==typeof e?e:r,o[1]=a;for(var u=2;u<i;u++)o[u]=n[u];return s.createElement.apply(null,o)}return s.createElement.apply(null,n)}m.displayName="MDXCreateElement"},39311:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>a,toc:()=>u});var s=n(25773),r=(n(27378),n(35318));const i={sidebar_position:1,description:"Learn how to publish and subscribe to messages using DeviceScript, Azure Event Hub, and Visual Studio Code extension.",keywords:["DeviceScript","Azure Event Hub","Visual Studio Code","publish message","subscribe message"]},o="Messages",a={unversionedId:"developer/cloud/messages",id:"developer/cloud/messages",title:"Messages",description:"Learn how to publish and subscribe to messages using DeviceScript, Azure Event Hub, and Visual Studio Code extension.",source:"@site/docs/developer/cloud/messages.mdx",sourceDirName:"developer/cloud",slug:"/developer/cloud/messages",permalink:"/devicescript/developer/cloud/messages",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,description:"Learn how to publish and subscribe to messages using DeviceScript, Azure Event Hub, and Visual Studio Code extension.",keywords:["DeviceScript","Azure Event Hub","Visual Studio Code","publish message","subscribe message"]},sidebar:"tutorialSidebar",previous:{title:"Cloud",permalink:"/devicescript/developer/cloud/"},next:{title:"Application Telemetry",permalink:"/devicescript/developer/cloud/telemetry"}},l={},u=[{value:"Publish Message",id:"publish-message",level:2},{value:"Subscribe Message",id:"subscribe-message",level:2},{value:"Visual Studio Code extension",id:"visual-studio-code-extension",level:2}],c={toc:u},p="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,s.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"messages"},"Messages"),(0,r.kt)("h2",{id:"publish-message"},"Publish Message"),(0,r.kt)("p",null,"Publish a topic, payload pair to the gateway."),(0,r.kt)("p",null,"DeviceScript will stringify and upload your object as a JSON payload. The gateway add this messages\ninto an ",(0,r.kt)("a",{parentName:"p",href:"https://azure.microsoft.com/en-us/products/event-hubs/"},"Azure Event Hub"),", additonal sinks can be configured online."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { publishMessage } from "@devicescript/cloud"\n\n// highlight-next-line\nawait publishMessage("greetings", { msg: "hello" })\n')),(0,r.kt)("p",null,"In the device gateway, this topic will be expanded to ",(0,r.kt)("inlineCode",{parentName:"p"},"devs/{deviceid}/from/{topic}"),".\nIf you want to override this behavior, use ",(0,r.kt)("inlineCode",{parentName:"p"},"/{topic}")," and the leading will be removed\nthe MQTT topic to be ",(0,r.kt)("inlineCode",{parentName:"p"},"{topic}"),"."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Keep those field names very short as the payload needs to be small (",(0,r.kt)("inlineCode",{parentName:"p"},"< 236")," bytes).")),(0,r.kt)("p",null,"In the Visual Studio Code extension, you can upload a JSON\nmessage from the device context menu."),(0,r.kt)("h2",{id:"subscribe-message"},"Subscribe Message"),(0,r.kt)("p",null,"Subscribes to able to receive messages from the gateway."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { subscribeMessage } from "@devicescript/cloud"\n\nsubscribeMessage("greetings", async msg => {\n    console.log(msg)\n})\n')),(0,r.kt)("h2",{id:"visual-studio-code-extension"},"Visual Studio Code extension"),(0,r.kt)("p",null,"In the DeviceScript Gateway extension, you can connect to the device and\nsee the messages in the output window."))}d.isMDXComponent=!0}}]);