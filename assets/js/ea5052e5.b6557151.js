"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2105],{35318:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var r=n(27378);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),d=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=d(e.components);return r.createElement(s.Provider,{value:t},e.children)},l="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),l=d(n),p=i,f=l["".concat(s,".").concat(p)]||l[p]||g[p]||o;return n?r.createElement(f,a(a({ref:t},u),{},{components:n})):r.createElement(f,a({ref:t},u))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=p;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[l]="string"==typeof e?e:i,a[1]=c;for(var d=2;d<o;d++)a[d]=n[d];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},59112:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>g,frontMatter:()=>o,metadata:()=>c,toc:()=>d});var r=n(25773),i=(n(27378),n(35318));const o={title:"Debugging",sidebar_position:3},a="Debugging",c={unversionedId:"getting-started/vscode/debugging",id:"getting-started/vscode/debugging",title:"Debugging",description:"DeviceScript programs can be debugged using the usual Visual Studio Code debugger interface.",source:"@site/docs/getting-started/vscode/debugging.mdx",sourceDirName:"getting-started/vscode",slug:"/getting-started/vscode/debugging",permalink:"/devicescript/getting-started/vscode/debugging",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Debugging",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"User Interface",permalink:"/devicescript/getting-started/vscode/user-interface"},next:{title:"Troubleshooting",permalink:"/devicescript/getting-started/vscode/troubleshooting"}},s={},d=[{value:"Configuration",id:"configuration",level:2},{value:"<code>program</code>",id:"program",level:3},{value:"<code>stopOnEntry</code>",id:"stoponentry",level:3},{value:"<code>deviceId</code>",id:"deviceid",level:3}],u={toc:d},l="wrapper";function g(e){let{components:t,...n}=e;return(0,i.kt)(l,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"debugging"},"Debugging"),(0,i.kt)("p",null,"DeviceScript programs can be debugged using the usual Visual Studio Code debugger interface."),(0,i.kt)("p",null,"The Jacdac communication layer continues to process packets while the DeviceScript program is paused."),(0,i.kt)("h2",{id:"configuration"},"Configuration"),(0,i.kt)("p",null,"DeviceScript project come with default debugging configurations, in ",(0,i.kt)("inlineCode",{parentName:"p"},"launch.json"),", that can be extended or reconfigured."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="launch.json"',title:'"launch.json"'},'{\n    "version": "0.2.0",\n    "configurations": [\n        ...\n        // highlight-start\n        {\n            "name": "DeviceScript",\n            "type": "devicescript",\n            "request": "launch",\n            "program": "${workspaceFolder}/src/main.ts",\n            "deviceId": "${command:deviceScriptSimulator}",\n            "stopOnEntry": false\n        },\n        // highlight-end\n')),(0,i.kt)("h3",{id:"program"},(0,i.kt)("inlineCode",{parentName:"h3"},"program")),(0,i.kt)("p",null,"Let's you choose a different entry point file for debugging."),(0,i.kt)("h3",{id:"stoponentry"},(0,i.kt)("inlineCode",{parentName:"h3"},"stopOnEntry")),(0,i.kt)("p",null,"Notifies the debugger to break on the first user-code statement, or not."),(0,i.kt)("h3",{id:"deviceid"},(0,i.kt)("inlineCode",{parentName:"h3"},"deviceId")),(0,i.kt)("p",null,"Specifies the device that the debugger should bind to. It can be a device identifier (short or long)\nor the ",(0,i.kt)("inlineCode",{parentName:"p"},"${command:deviceScriptSimulator}")," command that launches the simulator."))}g.isMDXComponent=!0}}]);