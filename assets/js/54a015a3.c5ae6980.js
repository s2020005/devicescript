"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1747],{35318:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>u});var a=r(27378);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),p=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(r),h=n,u=d["".concat(s,".").concat(h)]||d[h]||m[h]||o;return r?a.createElement(u,i(i({ref:t},c),{},{components:r})):a.createElement(u,i({ref:t},c))}));function u(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:n,i[1]=l;for(var p=2;p<o;p++)i[p]=r[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}h.displayName="MDXCreateElement"},26603:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=r(25773),n=(r(27378),r(35318));const o={sidebar_position:4,description:"Learn how to create a thermostat controller using temperature sensor, relay, and observables for filtering, throttling, and level detection.",keywords:["thermostat","temperature sensor","relay","observables","devicescript"]},i="Thermostat",l={unversionedId:"getting-started/samples/thermostat",id:"getting-started/samples/thermostat",title:"Thermostat",description:"Learn how to create a thermostat controller using temperature sensor, relay, and observables for filtering, throttling, and level detection.",source:"@site/docs/getting-started/samples/thermostat.mdx",sourceDirName:"getting-started/samples",slug:"/getting-started/samples/thermostat",permalink:"/devicescript/getting-started/samples/thermostat",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,description:"Learn how to create a thermostat controller using temperature sensor, relay, and observables for filtering, throttling, and level detection.",keywords:["thermostat","temperature sensor","relay","observables","devicescript"]},sidebar:"tutorialSidebar",previous:{title:"Copy Paste Button",permalink:"/devicescript/getting-started/samples/copy-paste-button"},next:{title:"Thermostat + Gateaway",permalink:"/devicescript/getting-started/samples/thermostat-gateway"}},s={},p=[{value:"Logging sensor data",id:"logging-sensor-data",level:2},{value:"Add observables",id:"add-observables",level:2},{value:"Filtering",id:"filtering",level:2},{value:"Tapping",id:"tapping",level:2},{value:"Throttling",id:"throttling",level:2},{value:"Level detector",id:"level-detector",level:2},{value:"Relay",id:"relay",level:2},{value:"Relay on ESP32",id:"relay-on-esp32",level:2}],c={toc:p},d="wrapper";function m(e){let{components:t,...r}=e;return(0,n.kt)(d,(0,a.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"thermostat"},"Thermostat"),(0,n.kt)("p",null,"A rudimentary thermostat controller that uses a\ntemperature sensor to decide when to turn on or off a furnace controlled by a relay."),(0,n.kt)("h2",{id:"logging-sensor-data"},"Logging sensor data"),(0,n.kt)("p",null,"Let's start by mounting a ",(0,n.kt)("inlineCode",{parentName:"p"},"temperature")," service client\nand logging each sensor reading to the console (using ",(0,n.kt)("inlineCode",{parentName:"p"},"console.data"),")."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},'import { Temperature } from "@devicescript/core"\n\nconst thermometer = new Temperature()\nthermometer.reading.subscribe(t => {\n    console.data({ t })\n})\n')),(0,n.kt)("p",null,"In Visual Studio Code, you can run this program with a simulated device and sensor and collect virtual data.\nClick on the ",(0,n.kt)("inlineCode",{parentName:"p"},"Download Data")," icon in the DeviceScript view, you can analyze the data in a notebook."),(0,n.kt)("p",null,"This approach works for a basic scenario but we lack the control over when data arrives, how it is filtered\nand at which rate.\nThis is where ",(0,n.kt)("a",{parentName:"p",href:"/api/observables"},"observables")," come into play."),(0,n.kt)("h2",{id:"add-observables"},"Add observables"),(0,n.kt)("p",null,"Add this import to your ",(0,n.kt)("inlineCode",{parentName:"p"},"main.ts")," file (the ",(0,n.kt)("inlineCode",{parentName:"p"},"@devicescript/observables")," is ",(0,n.kt)("a",{parentName:"p",href:"/developer/packages"},"builtin"),")."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip",skip:!0},'import "@devicescript/observables"\n')),(0,n.kt)("h2",{id:"filtering"},"Filtering"),(0,n.kt)("p",null,"Observables provide a way to add operators over streams of data. A register like ",(0,n.kt)("inlineCode",{parentName:"p"},"temperature")," is like\na stream of readings and we'll use ",(0,n.kt)("a",{parentName:"p",href:"/api/observables"},"operators")," to manipulate them."),(0,n.kt)("p",null,"We start with the ",(0,n.kt)("inlineCode",{parentName:"p"},"ewma")," operator, which applies a exponentially weighted moving average filter to the data."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},'import { Temperature } from "@devicescript/core"\n// highlight-next-line\nimport { ewma } from "@devicescript/observables"\n\nconst thermometer = new Temperature()\nthermometer.reading\n    // highlight-next-line\n    .pipe(ewma(0.9))\n    .subscribe(t => console.data({ t }))\n')),(0,n.kt)("h2",{id:"tapping"},"Tapping"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},'import { Temperature } from "@devicescript/core"\n// highlight-next-line\nimport { ewma, tap } from "@devicescript/observables"\n\nconst thermometer = new Temperature()\nthermometer.reading\n    .pipe(\n        // highlight-next-line\n        tap(t_raw => console.data({ t_raw })),\n        ewma(0.9)\n    )\n    .subscribe(t => console.data({ t }))\n')),(0,n.kt)("h2",{id:"throttling"},"Throttling"),(0,n.kt)("p",null,"Although the sensor may produce a high frequency of data locally, we probably want to\nthrottle the output to a slower pace when deciding to control the relay.\nThis can be done through ",(0,n.kt)("inlineCode",{parentName:"p"},"throttleTime")," (stream first value and wait) or ",(0,n.kt)("inlineCode",{parentName:"p"},"auditTime")," (wait then stream last value)."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},'import { Temperature } from "@devicescript/core"\n// highlight-next-line\nimport { ewma, tap, auditTime } from "@devicescript/observables"\n\nconst thermometer = new Temperature()\nthermometer.reading\n    .pipe(\n        tap(t_raw => console.data({ t_raw })),\n        ewma(0.9),\n        tap(t_ewma => console.data({ t_ewma })),\n        // highlight-next-line\n        auditTime(5000) // once every 5 seconds\n    )\n    .subscribe(t => console.data({ t }))\n')),(0,n.kt)("h2",{id:"level-detector"},"Level detector"),(0,n.kt)("p",null,"The next step is to categorize the current temperature in 3 zones, or levels: low, mid, high.\nIn the low zone, the relay should be turn on to heat the room. In the high zone, the relay should be turned off.\nIn the ",(0,n.kt)("inlineCode",{parentName:"p"},"mid")," zone, the relay should not be actuated to avoid switching at the boundary of the levels."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},'import { Temperature } from "@devicescript/core"\n// highlight-next-line\nimport { ewma, tap, auditTime, levelDetector } from "@devicescript/observables"\n\nconst thermometer = new Temperature()\n// highlight-next-line\nconst t_ref = 68 // degree F\n\nthermometer.reading\n    .pipe(\n        tap(t_raw => console.data({ t_raw })),\n        ewma(0.9),\n        tap(t_ewma => console.data({ t_ewma })),\n        auditTime(5000), // once every 5 seconds\n        tap(t_audit => console.data({ t_audit })),\n        // highlight-next-line\n        levelDetector(t_ref - 1, t_ref + 1), // -1 = low, 0 = mid, 1 = high\n        // highlight-next-line\n        tap(level => console.data({ level }))\n    )\n    // highlight-next-line\n    .subscribe(level => console.data({ level }))\n')),(0,n.kt)("h2",{id:"relay"},"Relay"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},'import { Temperature, Relay } from "@devicescript/core"\nimport { ewma, tap, auditTime, levelDetector } from "@devicescript/observables"\n\nconst thermometer = new Temperature()\nconst t_ref = 68 // degree F\n// highlight-next-line\nconst relay = new Relay()\n\nthermometer.reading\n    .pipe(\n        tap(t_raw => console.data({ t_raw })),\n        ewma(0.9),\n        tap(t_ewma => console.data({ t_ewma })),\n        auditTime(5000),\n        tap(t_audit => console.data({ t_audit })),\n        levelDetector(t_ref - 1, t_ref + 1),\n        tap(level => console.data({ level }))\n    )\n    .subscribe(async level => {\n        // highlight-start\n        if (level < 0) await relay.enabled.write(true)\n        else if (level > 0) await relay.enabled.write(false)\n        console.data({ relay: await relay.enabled.read() })\n        // highlight-end\n    })\n')),(0,n.kt)("h2",{id:"relay-on-esp32"},"Relay on ESP32"),(0,n.kt)("p",null,"Using a ESP32 board and a relay on pin ",(0,n.kt)("inlineCode",{parentName:"p"},"A0"),", we can\nfinalize this example."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},'import { pins } from "@dsboard/adafruit_qt_py_c3"\nimport { Temperature } from "@devicescript/core"\nimport { ewma, tap, auditTime, levelDetector } from "@devicescript/observables"\n// highlight-next-line\nimport { startRelay } from "@devicescript/servers"\n\nconst thermometer = new Temperature()\nconst t_ref = 68 // degree F\n// highlight-start\nconst relay = startRelay({\n    pin: pins.A0,\n})\n// highlight-end\n\nthermometer.reading\n    .pipe(\n        tap(t_raw => console.data({ t_raw })),\n        ewma(0.9),\n        tap(t_ewma => console.data({ t_ewma })),\n        auditTime(5000),\n        tap(t_audit => console.data({ t_audit })),\n        levelDetector(t_ref - 1, t_ref + 1),\n        tap(level => console.data({ level }))\n    )\n    .subscribe(async level => {\n        if (level < 0) await relay.enabled.write(true)\n        else if (level > 0) await relay.enabled.write(false)\n        console.data({ relay: await relay.enabled.read() })\n    })\n')))}m.isMDXComponent=!0}}]);