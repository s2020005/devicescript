"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1297],{35318:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>v});var i=n(27378);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=i.createContext({}),p=function(e){var t=i.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=p(e.components);return i.createElement(o.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),d=p(n),u=a,v=d["".concat(o,".").concat(u)]||d[u]||m[u]||r;return n?i.createElement(v,l(l({ref:t},s),{},{components:n})):i.createElement(v,l({ref:t},s))}));function v(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=u;var c={};for(var o in t)hasOwnProperty.call(t,o)&&(c[o]=t[o]);c.originalType=e,c[d]="string"==typeof e?e:a,l[1]=c;for(var p=2;p<r;p++)l[p]=n[p];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},69903:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>c,toc:()=>p});var i=n(25773),a=(n(27378),n(35318));const r={pagination_prev:null,pagination_next:null,description:"DeviceScript client for Jacdac Magnetic field level service"},l="MagneticFieldLevel",c={unversionedId:"api/clients/magneticfieldlevel",id:"api/clients/magneticfieldlevel",title:"MagneticFieldLevel",description:"DeviceScript client for Jacdac Magnetic field level service",source:"@site/docs/api/clients/magneticfieldlevel.md",sourceDirName:"api/clients",slug:"/api/clients/magneticfieldlevel",permalink:"/devicescript/api/clients/magneticfieldlevel",draft:!1,tags:[],version:"current",frontMatter:{pagination_prev:null,pagination_next:null,description:"DeviceScript client for Jacdac Magnetic field level service"},sidebar:"tutorialSidebar"},o={},p=[{value:"Registers",id:"registers",level:2},{value:"reading",id:"ro:reading",level:3},{value:"detected",id:"ro:detected",level:3},{value:"variant",id:"const:variant",level:3},{value:"Events",id:"events",level:2},{value:"active",id:"active",level:3},{value:"inactive",id:"inactive",level:3}],s={toc:p},d="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,i.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"magneticfieldlevel"},"MagneticFieldLevel"),(0,a.kt)("p",null,"A sensor that measures strength and polarity of magnetic field."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"client for ",(0,a.kt)("a",{parentName:"li",href:"https://microsoft.github.io/jacdac-docs/services/magneticfieldlevel/"},"Magnetic field level service")),(0,a.kt)("li",{parentName:"ul"},"inherits Sensor")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { MagneticFieldLevel } from "@devicescript/core"\n\nconst magneticFieldLevel = new MagneticFieldLevel()\n')),(0,a.kt)("h2",{id:"registers"},"Registers"),(0,a.kt)("h3",{id:"ro:reading"},"reading"),(0,a.kt)("p",null,"Indicates the strength of magnetic field between -1 and 1.\nWhen no magnet is present the value should be around 0.\nFor analog sensors,\nwhen the north pole of the magnet is on top of the module\nand closer than south pole, then the value should be positive.\nFor digital sensors,\nthe value should either ",(0,a.kt)("inlineCode",{parentName:"p"},"0")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"1"),", regardless of polarity."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"type: ",(0,a.kt)("inlineCode",{parentName:"p"},"Register<number>")," (packing format ",(0,a.kt)("inlineCode",{parentName:"p"},"i1.15"),")")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"read only"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { MagneticFieldLevel } from "@devicescript/core"\n\nconst magneticFieldLevel = new MagneticFieldLevel()\n// ...\nconst value = await magneticFieldLevel.reading.read()\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"track incoming values")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { MagneticFieldLevel } from "@devicescript/core"\n\nconst magneticFieldLevel = new MagneticFieldLevel()\n// ...\nmagneticFieldLevel.reading.subscribe(async (value) => {\n    ...\n})\n')),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"write")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"read")," will block until a server is bound to the client.")),(0,a.kt)("h3",{id:"ro:detected"},"detected"),(0,a.kt)("p",null,"Determines if the magnetic field is present.\nIf the event ",(0,a.kt)("inlineCode",{parentName:"p"},"active")," is observed, ",(0,a.kt)("inlineCode",{parentName:"p"},"detected")," is true; if ",(0,a.kt)("inlineCode",{parentName:"p"},"inactive")," is observed, ",(0,a.kt)("inlineCode",{parentName:"p"},"detected")," is false."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"type: ",(0,a.kt)("inlineCode",{parentName:"p"},"Register<boolean>")," (packing format ",(0,a.kt)("inlineCode",{parentName:"p"},"u8"),")")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"read only"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip",skip:!0},'import { MagneticFieldLevel } from "@devicescript/core"\n\nconst magneticFieldLevel = new MagneticFieldLevel()\n// ...\nconst value = await magneticFieldLevel.detected.read()\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"track incoming values")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip",skip:!0},'import { MagneticFieldLevel } from "@devicescript/core"\n\nconst magneticFieldLevel = new MagneticFieldLevel()\n// ...\nmagneticFieldLevel.detected.subscribe(async (value) => {\n    ...\n})\n')),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"write")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"read")," will block until a server is bound to the client.")),(0,a.kt)("h3",{id:"const:variant"},"variant"),(0,a.kt)("p",null,"Determines which magnetic poles the sensor can detected,\nand whether or not it can measure their strength or just presence."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"type: ",(0,a.kt)("inlineCode",{parentName:"p"},"Register<number>")," (packing format ",(0,a.kt)("inlineCode",{parentName:"p"},"u8"),")")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"optional: this register may not be implemented")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"constant: the register value will not change (until the next reset)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"read only"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { MagneticFieldLevel } from "@devicescript/core"\n\nconst magneticFieldLevel = new MagneticFieldLevel()\n// ...\nconst value = await magneticFieldLevel.variant.read()\n')),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"write")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"read")," will block until a server is bound to the client.")),(0,a.kt)("h2",{id:"events"},"Events"),(0,a.kt)("h3",{id:"active"},"active"),(0,a.kt)("p",null,"Emitted when strong-enough magnetic field is detected."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip no-run",skip:!0,"no-run":!0},"magneticFieldLevel.active.subscribe(() => {\n\n})\n")),(0,a.kt)("h3",{id:"inactive"},"inactive"),(0,a.kt)("p",null,"Emitted when strong-enough magnetic field is no longer detected."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip no-run",skip:!0,"no-run":!0},"magneticFieldLevel.inactive.subscribe(() => {\n\n})\n")),(0,a.kt)("p",null))}m.isMDXComponent=!0}}]);