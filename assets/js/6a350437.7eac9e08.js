"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[49],{35318:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var r=n(27378);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(n),m=i,g=d["".concat(c,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(g,a(a({ref:t},p),{},{components:n})):r.createElement(g,a({ref:t},p))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[d]="string"==typeof e?e:i,a[1]=s;for(var l=2;l<o;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},85829:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=n(25773),i=(n(27378),n(35318));const o={sidebar_position:2,description:"Learn how the toString() method works in DeviceScript and how it helps in string conversion for objects with limited stack space on embedded devices.",keywords:["DeviceScript","toString method","string conversion","embedded devices","util.inspect"]},a="toString() method",s={unversionedId:"language/tostring",id:"language/tostring",title:"toString() method",description:"Learn how the toString() method works in DeviceScript and how it helps in string conversion for objects with limited stack space on embedded devices.",source:"@site/docs/language/tostring.mdx",sourceDirName:"language",slug:"/language/tostring",permalink:"/devicescript/language/tostring",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,description:"Learn how the toString() method works in DeviceScript and how it helps in string conversion for objects with limited stack space on embedded devices.",keywords:["DeviceScript","toString method","string conversion","embedded devices","util.inspect"]},sidebar:"tutorialSidebar",previous:{title:"Async/await and promises",permalink:"/devicescript/language/async"},next:{title:"Strings and Unicode",permalink:"/devicescript/language/strings"}},c={},l=[],p={toc:l},d="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"tostring-method"},"toString() method"),(0,i.kt)("p",null,"ECMAScript spec requires converting values to string, deep in the internals of the runtime\n(in particular, in ",(0,i.kt)("inlineCode",{parentName:"p"},"a + b"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"a[b]"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"a == b"),", etc.).\nIt also mandates that these conversions use the ",(0,i.kt)("inlineCode",{parentName:"p"},".toString()")," method if provided on the object\nby the user."),(0,i.kt)("p",null,"These are complex to implement in very limited stack space available on embedded devices.\nConsider the following: ",(0,i.kt)("inlineCode",{parentName:"p"},".toString()")," triggers code execution with\nsay property indexing, which triggers another ",(0,i.kt)("inlineCode",{parentName:"p"},".toString()"),", etc.\nSee ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/microsoft/devicescript/issues/41"},"issue"),"."),(0,i.kt)("p",null,"To alleviate this problem, the built-in string conversion for objects in DeviceScript\nis similar to ",(0,i.kt)("inlineCode",{parentName:"p"},"util.inspect()")," in node.js - it will show a limited number of object fields.\nFor example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'const o = { x: 1, y: ["foo", 2] }\nconsole.log("o=", o)\nconsole.log("o=" + o)\nconsole.log(`o=${o}`)\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-console",metastring:'title="Output"',title:'"Output"'},'o={x:1,y:["foo",2]}\no={x:1,y:["foo",2]}\no={x:1,y:["foo",2]}\n')))}u.isMDXComponent=!0}}]);