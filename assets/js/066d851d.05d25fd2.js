"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5140],{35318:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(27378);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),o=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=o(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=o(n),h=i,m=d["".concat(l,".").concat(h)]||d[h]||u[h]||a;return n?r.createElement(m,s(s({ref:t},p),{},{components:n})):r.createElement(m,s({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,s=new Array(a);s[0]=h;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[d]="string"==typeof e?e:i,s[1]=c;for(var o=2;o<a;o++)s[o]=n[o];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},36956:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>c,toc:()=>o});var r=n(25773),i=(n(27378),n(35318));const a={},s="Test",c={unversionedId:"api/test/index",id:"api/test/index",title:"Test",description:"The @devicescript/test builtin package provides a lightweight unit test framework, with a subset of familiar APIs to Jest/Vitest/Mocha/Chai users (describe, test, expect).",source:"@site/docs/api/test/index.md",sourceDirName:"api/test",slug:"/api/test/",permalink:"/devicescript/api/test/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Settings",permalink:"/devicescript/api/settings/"},next:{title:"WebASM VM",permalink:"/devicescript/api/vm"}},l={},o=[{value:"Usage",id:"usage",level:2},{value:"<code>test</code>",id:"test-1",level:3},{value:"<code>describe</code>",id:"describe",level:3},{value:"<code>expect</code>",id:"expect",level:3},{value:"<code>beforeEach</code>",id:"beforeeach",level:3},{value:"<code>afterEach</code>",id:"aftereach",level:3}],p={toc:o},d="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"test"},"Test"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"@devicescript/test")," ",(0,i.kt)("a",{parentName:"p",href:"/developer/packages"},"builtin package")," provides a lightweight unit test framework, with a subset of familiar APIs to Jest/Vitest/Mocha/Chai users (",(0,i.kt)("inlineCode",{parentName:"p"},"describe"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"test"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"expect"),")."),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("h3",{id:"test-1"},(0,i.kt)("inlineCode",{parentName:"h3"},"test")),(0,i.kt)("p",null,"Defines a test with a name and a callback. There can be many tests and the callback can be ",(0,i.kt)("inlineCode",{parentName:"p"},"async"),". Tests should not be nested."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip",skip:!0},'import { describe, test } from "@devicescript/test"\n\ndescribe("this is a test suite", () => {\n    // highlight-next-line\n    test("this is a test", async () => {})\n})\n')),(0,i.kt)("h3",{id:"describe"},(0,i.kt)("inlineCode",{parentName:"h3"},"describe")),(0,i.kt)("p",null,"Declares and encapsulates a test suite. ",(0,i.kt)("inlineCode",{parentName:"p"},"describe")," calls can be nested."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip",skip:!0},'import { describe } from "@devicescript/test"\n\n// highlight-next-line\ndescribe("this is a test suite", () => {})\n')),(0,i.kt)("h3",{id:"expect"},(0,i.kt)("inlineCode",{parentName:"h3"},"expect")),(0,i.kt)("p",null,"BDD style assertion API."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip",skip:!0},'import { describe, test, expect } from "@devicescript/test"\n\ndescribe("this is a test suite", () => {\n    test("this is a test", async () => {\n        // highlight-next-line\n        expect(1 + 1).toBe(2)\n    })\n})\n')),(0,i.kt)("h3",{id:"beforeeach"},(0,i.kt)("inlineCode",{parentName:"h3"},"beforeEach")),(0,i.kt)("p",null,"Registers a callback to be called before each test in the current test suite."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip",skip:!0},'import { describe, test, expect } from "@devicescript/test"\n\ndescribe("this is a test suite", () => {\n    beforeEach(() => {\n        // highlight-next-line\n        console.log(`...`)\n    })\n    test("this is a test", () => {})\n})\n')),(0,i.kt)("h3",{id:"aftereach"},(0,i.kt)("inlineCode",{parentName:"h3"},"afterEach")),(0,i.kt)("p",null,"Registers a callback to be called after each test in the current test suite."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip",skip:!0},'import { describe, test, expect } from "@devicescript/test"\n\ndescribe("this is a test suite", () => {\n    afterEach(() => {\n        // highlight-next-line\n        console.log(`...`)\n    })\n    test("this is a test", () => {})\n})\n')))}u.isMDXComponent=!0}}]);