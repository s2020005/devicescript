"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8480],{35318:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>k});var a=t(27378);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),c=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=c(e.components);return a.createElement(p.Provider,{value:n},e.children)},s="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),s=c(t),m=r,k=s["".concat(p,".").concat(m)]||s[m]||u[m]||o;return t?a.createElement(k,l(l({ref:n},d),{},{components:t})):a.createElement(k,l({ref:n},d))}));function k(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,l=new Array(o);l[0]=m;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i[s]="string"==typeof e?e:r,l[1]=i;for(var c=2;c<o;c++)l[c]=t[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},41818:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var a=t(25773),r=(t(27378),t(35318));const o={pagination_prev:null,pagination_next:null,description:"DeviceScript client for Jacdac Cloud Adapter service"},l="CloudAdapter",i={unversionedId:"api/clients/cloudadapter",id:"api/clients/cloudadapter",title:"CloudAdapter",description:"DeviceScript client for Jacdac Cloud Adapter service",source:"@site/docs/api/clients/cloudadapter.md",sourceDirName:"api/clients",slug:"/api/clients/cloudadapter",permalink:"/devicescript/api/clients/cloudadapter",draft:!1,tags:[],version:"current",frontMatter:{pagination_prev:null,pagination_next:null,description:"DeviceScript client for Jacdac Cloud Adapter service"},sidebar:"tutorialSidebar"},p={},c=[{value:"Commands",id:"commands",level:2},{value:"uploadJson",id:"uploadjson",level:3},{value:"uploadBinary",id:"uploadbinary",level:3},{value:"Registers",id:"registers",level:2},{value:"connected",id:"ro:connected",level:3},{value:"connectionName",id:"ro:connectionName",level:3},{value:"Events",id:"events",level:2},{value:"onJson",id:"onjson",level:3},{value:"onBinary",id:"onbinary",level:3},{value:"change",id:"change",level:3}],d={toc:c},s="wrapper";function u(e){let{components:n,...t}=e;return(0,r.kt)(s,(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"cloudadapter"},"CloudAdapter"),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"This service is experimental and may change in the future.")),(0,r.kt)("p",null,"Supports cloud connections to upload and download data.\nNote that ",(0,r.kt)("inlineCode",{parentName:"p"},"f64")," values following a label are not necessarily aligned."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"client for ",(0,r.kt)("a",{parentName:"li",href:"https://microsoft.github.io/jacdac-docs/services/cloudadapter/"},"Cloud Adapter service")),(0,r.kt)("li",{parentName:"ul"},"inherits Role")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { CloudAdapter } from "@devicescript/core"\n\nconst cloudAdapter = new CloudAdapter()\n')),(0,r.kt)("h2",{id:"commands"},"Commands"),(0,r.kt)("h3",{id:"uploadjson"},"uploadJson"),(0,r.kt)("p",null,"Upload a JSON-encoded message to the cloud."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip no-run",skip:!0,"no-run":!0},"cloudAdapter.uploadJson(topic: string, json: string): Promise<void>\n")),(0,r.kt)("h3",{id:"uploadbinary"},"uploadBinary"),(0,r.kt)("p",null,"Upload a binary message to the cloud."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip no-run",skip:!0,"no-run":!0},"cloudAdapter.uploadBinary(topic: string, payload: Buffer): Promise<void>\n")),(0,r.kt)("h2",{id:"registers"},"Registers"),(0,r.kt)("h3",{id:"ro:connected"},"connected"),(0,r.kt)("p",null,"Indicate whether we're currently connected to the cloud server.\nWhen offline, ",(0,r.kt)("inlineCode",{parentName:"p"},"upload")," commands are queued."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"type: ",(0,r.kt)("inlineCode",{parentName:"p"},"Register<boolean>")," (packing format ",(0,r.kt)("inlineCode",{parentName:"p"},"u8"),")")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"read only"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip",skip:!0},'import { CloudAdapter } from "@devicescript/core"\n\nconst cloudAdapter = new CloudAdapter()\n// ...\nconst value = await cloudAdapter.connected.read()\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"track incoming values")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip",skip:!0},'import { CloudAdapter } from "@devicescript/core"\n\nconst cloudAdapter = new CloudAdapter()\n// ...\ncloudAdapter.connected.subscribe(async (value) => {\n    ...\n})\n')),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"write")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"read")," will block until a server is bound to the client.")),(0,r.kt)("h3",{id:"ro:connectionName"},"connectionName"),(0,r.kt)("p",null,"User-friendly name of the connection, typically includes name of the server\nand/or type of cloud service (",(0,r.kt)("inlineCode",{parentName:"p"},'"something.cloud.net (Provider IoT)"'),")."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"type: ",(0,r.kt)("inlineCode",{parentName:"p"},"Register<string>")," (packing format ",(0,r.kt)("inlineCode",{parentName:"p"},"s"),")")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"read only"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip",skip:!0},'import { CloudAdapter } from "@devicescript/core"\n\nconst cloudAdapter = new CloudAdapter()\n// ...\nconst value = await cloudAdapter.connectionName.read()\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"track incoming values")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip",skip:!0},'import { CloudAdapter } from "@devicescript/core"\n\nconst cloudAdapter = new CloudAdapter()\n// ...\ncloudAdapter.connectionName.subscribe(async (value) => {\n    ...\n})\n')),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"write")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"read")," will block until a server is bound to the client.")),(0,r.kt)("h2",{id:"events"},"Events"),(0,r.kt)("h3",{id:"onjson"},"onJson"),(0,r.kt)("p",null,"Emitted when cloud send us a JSON message."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip no-run",skip:!0,"no-run":!0},"cloudAdapter.onJson.subscribe(() => {\n\n})\n")),(0,r.kt)("h3",{id:"onbinary"},"onBinary"),(0,r.kt)("p",null,"Emitted when cloud send us a binary message."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip no-run",skip:!0,"no-run":!0},"cloudAdapter.onBinary.subscribe(() => {\n\n})\n")),(0,r.kt)("h3",{id:"change"},"change"),(0,r.kt)("p",null,"Emitted when we connect or disconnect from the cloud."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip no-run",skip:!0,"no-run":!0},"cloudAdapter.change.subscribe(() => {\n\n})\n")),(0,r.kt)("p",null))}u.isMDXComponent=!0}}]);