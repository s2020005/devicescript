"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9369],{35318:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>k});var i=t(27378);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=i.createContext({}),s=function(e){var n=i.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=s(e.components);return i.createElement(l.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},d=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),u=s(t),d=r,k=u["".concat(l,".").concat(d)]||u[d]||m[d]||a;return t?i.createElement(k,o(o({ref:n},c),{},{components:t})):i.createElement(k,o({ref:n},c))}));function k(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,o=new Array(a);o[0]=d;var p={};for(var l in n)hasOwnProperty.call(n,l)&&(p[l]=n[l]);p.originalType=e,p[u]="string"==typeof e?e:r,o[1]=p;for(var s=2;s<a;s++)o[s]=t[s];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}d.displayName="MDXCreateElement"},35238:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>p,toc:()=>s});var i=t(25773),r=(t(27378),t(35318));const a={pagination_prev:null,pagination_next:null,description:"DeviceScript client for Jacdac GPIO service"},o="GPIO",p={unversionedId:"api/clients/gpio",id:"api/clients/gpio",title:"GPIO",description:"DeviceScript client for Jacdac GPIO service",source:"@site/docs/api/clients/gpio.md",sourceDirName:"api/clients",slug:"/api/clients/gpio",permalink:"/devicescript/api/clients/gpio",draft:!1,tags:[],version:"current",frontMatter:{pagination_prev:null,pagination_next:null,description:"DeviceScript client for Jacdac GPIO service"},sidebar:"tutorialSidebar"},l={},s=[{value:"Commands",id:"commands",level:2},{value:"configure",id:"configure",level:3},{value:"pinInfo",id:"pininfo",level:3},{value:"pinByLabel",id:"pinbylabel",level:3},{value:"pinByHwPin",id:"pinbyhwpin",level:3},{value:"Registers",id:"registers",level:2},{value:"reading",id:"ro:reading",level:3},{value:"numPins",id:"ro:numPins",level:3}],c={toc:s},u="wrapper";function m(e){let{components:n,...t}=e;return(0,r.kt)(u,(0,i.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"gpio"},"GPIO"),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"This service is experimental and may change in the future.")),(0,r.kt)("p",null,"Access to General Purpose Input/Output (GPIO) pins on a board.\nThe pins are indexed ",(0,r.kt)("inlineCode",{parentName:"p"},"0 ... num_pins-1"),".\nThe indexing does not correspond to hardware pin names, nor labels on the board (see ",(0,r.kt)("inlineCode",{parentName:"p"},"get_pin_info")," command for that),\nand should ",(0,r.kt)("strong",{parentName:"p"},"not")," be exposed to the user."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"client for ",(0,r.kt)("a",{parentName:"li",href:"https://microsoft.github.io/jacdac-docs/services/gpio/"},"GPIO service")),(0,r.kt)("li",{parentName:"ul"},"inherits Sensor")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { GPIO } from "@devicescript/core"\n\nconst GPIO = new GPIO()\n')),(0,r.kt)("h2",{id:"commands"},"Commands"),(0,r.kt)("h3",{id:"configure"},"configure"),(0,r.kt)("p",null,"Configure (including setting the value) zero or more pins.\n",(0,r.kt)("inlineCode",{parentName:"p"},"Alternative")," settings means the pin is controlled by other service (SPI, I2C, UART, PWM, etc.)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip no-run",skip:!0,"no-run":!0},"GPIO.configure(pin: number, mode: GPIOMode): Promise<void>\n")),(0,r.kt)("h3",{id:"pininfo"},"pinInfo"),(0,r.kt)("p",null,"Report capabilities and name of a pin."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip no-run",skip:!0,"no-run":!0},"GPIO.pinInfo(pin: number): Promise<void>\n")),(0,r.kt)("h3",{id:"pinbylabel"},"pinByLabel"),(0,r.kt)("p",null,"This responds with ",(0,r.kt)("inlineCode",{parentName:"p"},"pin_info")," report."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip no-run",skip:!0,"no-run":!0},"GPIO.pinByLabel(label: string): Promise<void>\n")),(0,r.kt)("h3",{id:"pinbyhwpin"},"pinByHwPin"),(0,r.kt)("p",null,"This responds with ",(0,r.kt)("inlineCode",{parentName:"p"},"pin_info")," report."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip no-run",skip:!0,"no-run":!0},"GPIO.pinByHwPin(hw_pin: number): Promise<void>\n")),(0,r.kt)("h2",{id:"registers"},"Registers"),(0,r.kt)("h3",{id:"ro:reading"},"reading"),(0,r.kt)("p",null,"For every pin set to ",(0,r.kt)("inlineCode",{parentName:"p"},"Input*")," the corresponding ",(0,r.kt)("strong",{parentName:"p"},"bit")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"digital_values")," will be ",(0,r.kt)("inlineCode",{parentName:"p"},"1")," if and only if\nthe pin is high.\nFor other pins, the bit is ",(0,r.kt)("inlineCode",{parentName:"p"},"0"),".\nThis is normally streamed at low-ish speed, but it's also automatically reported whenever\na digital input pin changes value (throttled to ~100Hz).\nThe analog values can be read with the ",(0,r.kt)("inlineCode",{parentName:"p"},"ADC")," service."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"type: ",(0,r.kt)("inlineCode",{parentName:"p"},"Register<Buffer>")," (packing format ",(0,r.kt)("inlineCode",{parentName:"p"},"b"),")")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"track incoming values"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip",skip:!0},'import { GPIO } from "@devicescript/core"\n\nconst GPIO = new GPIO()\n// ...\nGPIO.reading.subscribe(async (value) => {\n    ...\n})\n')),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"write")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"read")," will block until a server is bound to the client.")),(0,r.kt)("h3",{id:"ro:numPins"},"numPins"),(0,r.kt)("p",null,"Number of pins that can be operated through this service."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"type: ",(0,r.kt)("inlineCode",{parentName:"p"},"Register<number>")," (packing format ",(0,r.kt)("inlineCode",{parentName:"p"},"u8"),")")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"read only"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip",skip:!0},'import { GPIO } from "@devicescript/core"\n\nconst GPIO = new GPIO()\n// ...\nconst value = await GPIO.numPins.read()\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"track incoming values")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip",skip:!0},'import { GPIO } from "@devicescript/core"\n\nconst GPIO = new GPIO()\n// ...\nGPIO.numPins.subscribe(async (value) => {\n    ...\n})\n')),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"write")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"read")," will block until a server is bound to the client.")),(0,r.kt)("p",null))}m.isMDXComponent=!0}}]);