"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2652],{35318:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>k});var a=r(27378);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var p=a.createContext({}),c=function(e){var t=a.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},s=function(e){var t=c(e.components);return a.createElement(p.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),u=c(r),d=n,k=u["".concat(p,".").concat(d)]||u[d]||m[d]||i;return r?a.createElement(k,l(l({ref:t},s),{},{components:r})):a.createElement(k,l({ref:t},s))}));function k(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,l=new Array(i);l[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[u]="string"==typeof e?e:n,l[1]=o;for(var c=2;c<i;c++)l[c]=r[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},19636:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var a=r(25773),n=(r(27378),r(35318));const i={pagination_prev:null,pagination_next:null,description:"DeviceScript client for Jacdac Heart Rate service"},l="HeartRate",o={unversionedId:"api/clients/heartrate",id:"api/clients/heartrate",title:"HeartRate",description:"DeviceScript client for Jacdac Heart Rate service",source:"@site/docs/api/clients/heartrate.md",sourceDirName:"api/clients",slug:"/api/clients/heartrate",permalink:"/devicescript/api/clients/heartrate",draft:!1,tags:[],version:"current",frontMatter:{pagination_prev:null,pagination_next:null,description:"DeviceScript client for Jacdac Heart Rate service"},sidebar:"tutorialSidebar"},p={},c=[{value:"Registers",id:"registers",level:2},{value:"reading",id:"ro:reading",level:3},{value:"readingError",id:"ro:readingError",level:3},{value:"variant",id:"const:variant",level:3}],s={toc:c},u="wrapper";function m(e){let{components:t,...r}=e;return(0,n.kt)(u,(0,a.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"heartrate"},"HeartRate"),(0,n.kt)("admonition",{type:"caution"},(0,n.kt)("p",{parentName:"admonition"},"This service is experimental and may change in the future.")),(0,n.kt)("p",null,"A sensor approximating the heart rate. "),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Jacdac is NOT suitable for medical devices and should NOT be used in any kind of device to diagnose or treat any medical conditions.")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"client for ",(0,n.kt)("a",{parentName:"li",href:"https://microsoft.github.io/jacdac-docs/services/heartrate/"},"Heart Rate service")),(0,n.kt)("li",{parentName:"ul"},"inherits Sensor")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},'import { HeartRate } from "@devicescript/core"\n\nconst heartRate = new HeartRate()\n')),(0,n.kt)("h2",{id:"registers"},"Registers"),(0,n.kt)("h3",{id:"ro:reading"},"reading"),(0,n.kt)("p",null,"The estimated heart rate."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"type: ",(0,n.kt)("inlineCode",{parentName:"p"},"Register<number>")," (packing format ",(0,n.kt)("inlineCode",{parentName:"p"},"u16.16"),")")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"read only"))),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip",skip:!0},'import { HeartRate } from "@devicescript/core"\n\nconst heartRate = new HeartRate()\n// ...\nconst value = await heartRate.reading.read()\n')),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"track incoming values")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip",skip:!0},'import { HeartRate } from "@devicescript/core"\n\nconst heartRate = new HeartRate()\n// ...\nheartRate.reading.subscribe(async (value) => {\n    ...\n})\n')),(0,n.kt)("admonition",{type:"note"},(0,n.kt)("p",{parentName:"admonition"},(0,n.kt)("inlineCode",{parentName:"p"},"write")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"read")," will block until a server is bound to the client.")),(0,n.kt)("h3",{id:"ro:readingError"},"readingError"),(0,n.kt)("p",null,"The estimated error on the reported sensor data."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"type: ",(0,n.kt)("inlineCode",{parentName:"p"},"Register<number>")," (packing format ",(0,n.kt)("inlineCode",{parentName:"p"},"u16.16"),")")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"optional: this register may not be implemented")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"read only"))),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip",skip:!0},'import { HeartRate } from "@devicescript/core"\n\nconst heartRate = new HeartRate()\n// ...\nconst value = await heartRate.readingError.read()\n')),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"track incoming values")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip",skip:!0},'import { HeartRate } from "@devicescript/core"\n\nconst heartRate = new HeartRate()\n// ...\nheartRate.readingError.subscribe(async (value) => {\n    ...\n})\n')),(0,n.kt)("admonition",{type:"note"},(0,n.kt)("p",{parentName:"admonition"},(0,n.kt)("inlineCode",{parentName:"p"},"write")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"read")," will block until a server is bound to the client.")),(0,n.kt)("h3",{id:"const:variant"},"variant"),(0,n.kt)("p",null,"The type of physical sensor"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"type: ",(0,n.kt)("inlineCode",{parentName:"p"},"Register<number>")," (packing format ",(0,n.kt)("inlineCode",{parentName:"p"},"u8"),")")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"optional: this register may not be implemented")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"constant: the register value will not change (until the next reset)")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"read only"))),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts",metastring:"skip",skip:!0},'import { HeartRate } from "@devicescript/core"\n\nconst heartRate = new HeartRate()\n// ...\nconst value = await heartRate.variant.read()\n')),(0,n.kt)("admonition",{type:"note"},(0,n.kt)("p",{parentName:"admonition"},(0,n.kt)("inlineCode",{parentName:"p"},"write")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"read")," will block until a server is bound to the client.")),(0,n.kt)("p",null))}m.isMDXComponent=!0}}]);