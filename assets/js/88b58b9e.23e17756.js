"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1368],{35318:(e,r,t)=>{t.d(r,{Zo:()=>c,kt:()=>d});var n=t(27378);function i(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){i(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function a(e,r){if(null==e)return{};var t,n,i=function(e,r){if(null==e)return{};var t,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(i[t]=e[t]);return i}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=n.createContext({}),p=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):l(l({},r),e)),t},c=function(e){var r=p(e.components);return n.createElement(s.Provider,{value:r},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},g=n.forwardRef((function(e,r){var t=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),m=p(t),g=i,d=m["".concat(s,".").concat(g)]||m[g]||u[g]||o;return t?n.createElement(d,l(l({ref:r},c),{},{components:t})):n.createElement(d,l({ref:r},c))}));function d(e,r){var t=arguments,i=r&&r.mdxType;if("string"==typeof e||i){var o=t.length,l=new Array(o);l[0]=g;var a={};for(var s in r)hasOwnProperty.call(r,s)&&(a[s]=r[s]);a.originalType=e,a[m]="string"==typeof e?e:i,l[1]=a;for(var p=2;p<o;p++)l[p]=t[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}g.displayName="MDXCreateElement"},21247:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>p});var n=t(25773),i=(t(27378),t(35318));const o={},l="Digital Signal processing",a={unversionedId:"api/observables/dsp",id:"api/observables/dsp",title:"Digital Signal processing",description:"ewma",source:"@site/docs/api/observables/dsp.mdx",sourceDirName:"api/observables",slug:"/api/observables/dsp",permalink:"/devicescript/api/observables/dsp",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Creation Operators",permalink:"/devicescript/api/observables/creation"},next:{title:"Filter Operators",permalink:"/devicescript/api/observables/filter"}},s={},p=[{value:"ewma",id:"ewma",level:2},{value:"rollingAverage",id:"rollingaverage",level:2},{value:"fir",id:"fir",level:2},{value:"levelDetector",id:"leveldetector",level:2}],c={toc:p},m="wrapper";function u(e){let{components:r,...t}=e;return(0,i.kt)(m,(0,n.Z)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"digital-signal-processing"},"Digital Signal processing"),(0,i.kt)("h2",{id:"ewma"},"ewma"),(0,i.kt)("p",null,"Exponentially weighted moving average is a simple PIR filter\nwith a gain parameter.\nThe closer gain to 1 and the more closely the EWMA tracks the original time series."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import { Temperature } from "@devicescript/core"\nimport { ewma } from "@devicescript/observables"\n\nconst thermometer = new Temperature()\n\nthermometer.reading\n    // highlight-next-line\n    .pipe(ewma(0.5))\n    .subscribe(t => console.log(t))\n')),(0,i.kt)("h2",{id:"rollingaverage"},"rollingAverage"),(0,i.kt)("p",null,"A windowed rolling average filter."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import { Temperature } from "@devicescript/core"\nimport { rollingAverage } from "@devicescript/observables"\n\nconst thermometer = new Temperature()\n\nthermometer.reading\n    // highlight-next-line\n    .pipe(rollingAverage(10))\n    .subscribe(t => console.log(t))\n')),(0,i.kt)("h2",{id:"fir"},"fir"),(0,i.kt)("p",null,"A general purpose Finite Response Filter filter. Coefficients are typically computed in a seperate process."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import { Temperature } from "@devicescript/core"\nimport { fir } from "@devicescript/observables"\n\nconst thermometer = new Temperature()\n\nthermometer.reading\n    // highlight-next-line\n    .pipe(fir([0.1, 0.2, 1]))\n    .subscribe(t => console.log(t))\n')),(0,i.kt)("h2",{id:"leveldetector"},"levelDetector"),(0,i.kt)("p",null,"Measures and thresholds data into low/mid/high levels."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import { Temperature } from "@devicescript/core"\nimport { levelDetector } from "@devicescript/observables"\n\nconst thermometer = new Temperature()\n\nthermometer.reading\n    // highlight-next-line\n    .pipe(levelDetector(20 /* low threshold */, 30 /*high threshold */))\n    .subscribe(level =>\n        console.log(level < 0 ? "cold" : level > 0 ? "hot" : "mild")\n    )\n')))}u.isMDXComponent=!0}}]);